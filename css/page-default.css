@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  Mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
.page-header-bg {
  padding: 4rem 0;
  min-height: 200px;
  margin-bottom: 6rem;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h1 {
  font-size: 3.4rem;
  margin: 0 0 1.5037593985rem;
  line-height: 4.2rem;
}
@media only screen and (min-width: 992px) {
  h1 {
    font-size: 4.216rem;
  }
}

p {
  font-size: inherit;
  margin: 0 0 1.3333333333rem;
}

.header-blog {
  font-size: 2.646rem;
  line-height: 1.1;
  text-align: center;
}
@media only screen and (min-width: 992px) {
  .header-blog {
    text-align: left;
    font-size: 1.848rem;
    line-height: 1.65;
  }
}
.header-blog p {
  font-size: inherit;
  margin-bottom: 0;
}

.single-blog {
  max-width: 770px;
  margin-left: auto;
  margin-right: auto;
  font-size: 1.806rem;
  line-height: 1.677;
}
@media only screen and (min-width: 992px) {
  .single-blog--body img, .single-blog--images img {
    margin-left: -60px;
    margin-right: -60px;
    max-width: calc(100% + 120px);
  }
}
.single-blog--title {
  text-align: center;
}
.single-blog--images {
  margin-bottom: 4rem;
}
.single-blog--introduction {
  margin-bottom: 4rem;
  font-weight: 400;
}
.single-blog--tags {
  display: flex;
  justify-content: center;
  font-size: 1.186440678rem;
  font-weight: 500;
  color: #7f7f7f;
  margin-bottom: 2rem;
}
.single-blog--tags .item {
  margin-right: 1rem;
  display: inline-flex;
}
.single-blog--tags .item a {
  padding: 0.5rem 1.3333333333rem;
  border: 1px solid #dee2e6;
  color: inherit;
}
.single-blog--icones_info {
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
  font-size: 1.186440678rem;
}
.single-blog--icones_info .item {
  margin-right: 1rem;
}
.single-blog--body {
  margin-bottom: 5rem;
}
.single-blog--body p + p img {
  margin-top: 2rem;
}
.single-blog--body h2 {
  padding-top: 2rem;
  position: relative;
}
.single-blog--body h2::before {
  content: "";
  display: block;
  border-top: 1px solid #dee2e6;
  margin-bottom: 4rem;
  margin-top: 6.4rem;
}
.single-blog .single-blog--owl .owl-nav .owl-prev {
  left: 0;
  right: auto;
  top: auto;
  bottom: 8rem;
}
.single-blog .single-blog--owl .owl-nav .owl-next {
  left: 5rem;
  right: auto;
  top: auto;
  bottom: 8rem;
}
.single-blog .single-blog--owl .owl-nav {
  position: relative;
  max-width: 500px;
  width: calc(100% - 60px);
  margin-left: auto;
  margin-right: auto;
}
@media only screen and (min-width: 992px) {
  .single-blog .single-blog--owl .owl-nav {
    max-width: 100%;
    width: calc(100% - 100px);
  }
}

/*
    To change this license header, choose License Headers in Project Properties.
    To change this template file, choose Tools | Templates and open the template in the editor.
*/
/*
    Created on : 31 mai 2021, 16:28:12
    Author     : stephane
*/

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/