@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h4 {
  font-size: 1.6rem;
  margin: 0 0 0.9090909091rem;
  line-height: 2rem;
}
@media only screen and (min-width: 992px) {
  h4 {
    font-size: 1.984rem;
  }
}

.service-icone {
  height: 100%;
  background-color: #3687c6;
  color: #FFF;
  padding: 4rem;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.service-icone .icone {
  font-size: 6.16rem;
  margin-right: 2rem;
}
.service-icone .titre {
  color: inherit;
  line-height: 2.6rem;
  margin-bottom: 3.5rem;
  position: relative;
}
.service-icone .titre::before {
  position: absolute;
  top: auto;
  bottom: -1rem;
  width: 3rem;
  height: 0.15rem;
  background-color: #FFF;
  content: "";
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.service-icone:hover {
  background-color: #FFF;
  color: #4c4c4c;
}
.service-icone:hover .titre::before {
  background-color: #4c4c4c;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/