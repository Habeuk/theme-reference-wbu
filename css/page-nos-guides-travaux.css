@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
.page-header-bg {
  padding: 4rem 0;
  min-height: 200px;
  margin-bottom: 6rem;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h1 {
  font-size: 3.4rem;
  margin: 0 0 1.5037593985rem;
  line-height: 4.2rem;
}
@media only screen and (min-width: 992px) {
  h1 {
    font-size: 4.216rem;
  }
}

p {
  font-size: inherit;
  margin: 0 0 1.3333333333rem;
}

.header-blog {
  margin-bottom: 5rem;
  font-size: 2.646rem;
  line-height: 1.1;
  text-align: center;
}
@media only screen and (min-width: 992px) {
  .header-blog {
    text-align: left;
    font-size: 1.848rem;
    line-height: 1.65;
  }
}
.header-blog p {
  font-size: inherit;
  margin-bottom: 0;
}

.teaser-img-title {
  padding: 2rem;
  position: relative;
  z-index: 0;
  margin-bottom: 3rem;
}
.teaser-img-title::before {
  content: "";
  position: absolute;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  background: linear-gradient(180deg, rgba(255, 255, 255, 0.4) 0%, rgba(0, 0, 0, 0.56) 100%);
  z-index: 0;
}
.teaser-img-title__title {
  min-height: 200px;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 2.52rem;
  color: #FFF;
  position: relative;
  z-index: 1;
  font-weight: 700;
  text-align: center;
}
.teaser-img-title__title a {
  color: #FFF;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  justify-content: center;
  align-items: center;
}

h3 {
  font-size: 1.8rem;
  line-height: 2.4rem;
}
@media only screen and (min-width: 992px) {
  h3 {
    font-size: 2.268rem;
  }
}

.teaser-img-desc {
  margin-bottom: 3rem;
  position: relative;
  z-index: 1;
}
.teaser-img-desc__image {
  width: 260px;
  position: relative;
}
.teaser-img-desc__image .categorie {
  position: absolute;
  background: #FFF;
  border-radius: 0.2rem;
  top: 10px;
  right: auto;
  left: 10px;
  padding: 0.8rem 1.4rem;
  font-weight: 600;
  font-size: 1.1965811966rem;
  z-index: 1;
}
.teaser-img-desc__image .img a::before {
  content: "";
  background-color: #333;
  opacity: 0.3;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 0;
}
.teaser-img-desc__desc {
  width: calc(100% - 260px);
  padding-left: 1.3333333333rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
@media only screen and (min-width: 992px) {
  .teaser-img-desc__desc {
    padding-right: 8rem;
  }
}
.teaser-img-desc__desc .description {
  margin-bottom: 1rem;
}
.teaser-img-desc__desc .title {
  font-weight: 500;
  margin-bottom: 1.3333333333rem;
  line-height: 2.4rem;
}
.teaser-img-desc__desc .title a {
  color: inherit;
}
.teaser-img-desc__desc .time_read {
  position: relative;
  font-size: 1.1965811966rem;
  padding-left: 1.7rem;
}
.teaser-img-desc__desc .time_read::before {
  content: "";
  position: absolute;
  width: 1.2rem;
  height: 1.2rem;
  top: auto;
  left: 0;
  bottom: 0;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='11' viewBox='0 0 12 11' fill='none'%3E%3Cpath d='M5.93919 10.3125C8.61094 10.3125 10.7768 8.15787 10.7768 5.5C10.7768 2.84213 8.61094 0.6875 5.93919 0.6875C3.26744 0.6875 1.10156 2.84213 1.10156 5.5C1.10156 8.15787 3.26744 10.3125 5.93919 10.3125Z' stroke='%23A9A9A9' stroke-linecap='round' stroke-linejoin='round'%3E%3C/path%3E%3Cpath d='M5.9375 2.75V5.5L7.31968 6.875' stroke='%23A9A9A9' stroke-linecap='round' stroke-linejoin='round'%3E%3C/path%3E%3C/svg%3E");
  background-repeat: no-repeat;
}
.teaser-img-desc.flex-column .teaser-img-desc__image {
  width: 100%;
}
.teaser-img-desc.flex-column .teaser-img-desc__desc {
  width: 100%;
  padding: 2rem 1.3333333333rem 0;
}

.paragraphList {
  margin-bottom: 4rem;
  text-align: center;
}
.paragraphList ul {
  list-style: none;
  padding: 0;
}
.paragraphList ul li {
  margin-top: 5px;
  display: flex;
  justify-content: start;
  align-items: center;
}
.paragraphList ul li .list_icon {
  width: 25px;
  height: 25px;
  display: flex;
  justify-content: center;
  background-color: ghostwhite;
  align-items: center;
  border-radius: 20px;
  padding: 5px;
  color: teal;
  margin-right: 15px;
}
@media only screen and (max-width: 440px) {
  .paragraphList ul li .list_icon {
    width: 18px;
    height: 18px;
    font-size: 11px;
  }
}
.paragraphList ul li p {
  text-align: left;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 18px;
  color: #1b1918;
}
.paragraphList ul li p span {
  color: #49a0a2;
}

.serviceBlock-module {
  flex-basis: calc(50% - 15px);
  margin: 0 auto 5rem;
  width: 100%;
}
.serviceBlock-module__container {
  background: linear-gradient(36.64deg, #007891 14.08%, #49a0a2);
  display: flex;
  justify-content: center;
  align-items: center;
}
.serviceBlock-module__serviceMessage {
  background-color: #fff;
  margin: 4rem 5rem 6rem;
  padding: 2rem 2rem 6rem;
  position: relative;
  text-align: center;
  color: #1b1918;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__serviceMessage {
    margin: 4rem 3rem 6rem;
  }
}
.serviceBlock-module__serviceTitle {
  line-height: 1.105;
  margin-bottom: 4rem;
}
.serviceBlock-module__serviceDescription {
  font-weight: 400;
}
.serviceBlock-module__button {
  text-decoration: none;
  color: #fff;
  background: #1b1918;
  border-radius: 2px;
  font-style: normal;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 24px;
  padding: 10px 20px;
  bottom: 0;
  transform: translateY(18%);
  display: inline-block;
}
.serviceBlock-module__button a {
  color: #FFF;
}
.serviceBlock-module__button i {
  font-size: 1.4rem;
  font-weight: 200;
  margin-left: 10px;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__button {
    margin-top: 10px;
    position: relative;
  }
}

.serviceBlock-module {
  margin-top: 3rem;
}
.serviceBlock-module .serviceBlock-module__serviceMessage {
  margin: 2rem;
}

.realisation-categories {
  margin-bottom: 3rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/