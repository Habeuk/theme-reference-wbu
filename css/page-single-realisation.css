@import url(https://fonts.googleapis.com/css2?family=Ubuntu:wght@300;500;700&display=swap);
@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
.space-margin {
  margin-bottom: 8rem;
}

.space-padding {
  padding: 8rem 0;
}

body,
html {
  font-family: "Ubuntu", sans-serif;
  font-weight: 300;
}
body h1,
body h2,
body h3,
body h4,
body h5,
body h6,
html h1,
html h2,
html h3,
html h4,
html h5,
html h6 {
  font-family: "Ubuntu", sans-serif;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

.galeryImage {
  width: 100%;
  display: flex;
  margin-bottom: 5rem;
}
.galeryImage__big {
  width: 75%;
  padding-right: 3px;
  flex-grow: 0;
  max-width: 75%;
}
.galeryImage__big img {
  width: 100%;
  max-height: 500px;
  height: 100%;
}
.galeryImage__small {
  display: flex;
  flex-direction: column;
  max-width: 25%;
}
.galeryImage__small .small {
  margin-bottom: 4px;
  width: 100%;
  color: #fff;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
}
.galeryImage__small .small:last-child {
  margin: 0;
  position: relative;
}
.galeryImage__small .small:last-child .small__voirPlus {
  color: #fff;
  position: absolute;
  text-decoration: none;
  font-weight: 400;
  font-size: 1.96rem;
  cursor: pointer;
}
@media only screen and (max-width: 991px) {
  .galeryImage__small .small:last-child .small__voirPlus {
    font-size: 1.4rem;
  }
}
@media only screen and (max-width: 575px) {
  .galeryImage__small .small:last-child .small__voirPlus {
    font-size: 0.84rem;
  }
}
.galeryImage__small .small:last-child .small__voirPlus:hover {
  text-decoration: underline;
}
.galeryImage__small .small:last-child::before {
  content: "";
  position: absolute;
  background-color: black;
  top: 0;
  opacity: 0.35;
  bottom: 0;
  right: 0;
  left: 0;
  transition: ease-in-out 0.2s;
}
.galeryImage__small .small:last-child:hover::before {
  opacity: 0.7;
}
.galeryImage__small .small img {
  margin: 0;
  max-width: 295px;
  width: 100%;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h3 {
  font-size: 1.8rem;
  line-height: 2.4rem;
  margin: 0 0 1.0526315789rem;
}
@media only screen and (min-width: 992px) {
  h3 {
    font-size: 2.268rem;
  }
}

h1 {
  font-size: 3.4rem;
  margin: 0 0 1.5037593985rem;
  line-height: 4.2rem;
}
@media only screen and (min-width: 992px) {
  h1 {
    font-size: 4.216rem;
  }
}

.galeryTitle {
  width: 100%;
  display: block;
  box-sizing: border-box;
  margin: 1rem auto;
  padding-left: 10px;
  padding-right: 10px;
  margin-bottom: 5rem;
}
.galeryTitle__container {
  width: 100%;
  display: flex;
  align-items: center;
  flex-direction: column;
  flex-wrap: wrap;
  box-sizing: border-box;
}
.galeryTitle__container .title {
  font-size: 4.62rem;
  color: #3687c6;
  text-align: center;
  margin: 0;
  line-height: 48px;
  margin-bottom: 1rem;
}
@media only screen and (max-width: 1024px) {
  .galeryTitle__container .title {
    font-size: 3.5rem;
    line-height: 1.3;
  }
}
@media only screen and (max-width: 575px) {
  .galeryTitle__container .title {
    font-size: 2.8rem;
    line-height: 1.3;
  }
}
.galeryTitle__container .description {
  margin-bottom: 2rem;
}
.galeryTitle__container .list-terms {
  font-size: 1.2727272727rem;
  position: relative;
  padding-left: 1.4rem;
}
.galeryTitle__container .list-terms::before {
  position: absolute;
  content: "";
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg width='10' height='10' xmlns='http://www.w3.org/2000/svg' x='0px' y='0px' viewBox='0 0 297 297' style='enable-background:new 0 0 297 297;' xml:space='preserve'%3E%3Cg fill='%234c4c4c'%3E%3Cpath d='M148.5,0C87.43,0,37.747,49.703,37.747,110.797c0,91.026,99.729,179.905,103.976,183.645 c1.936,1.705,4.356,2.559,6.777,2.559c2.421,0,4.841-0.853,6.778-2.559c4.245-3.739,103.975-92.618,103.975-183.645 C259.253,49.703,209.57,0,148.5,0z M148.5,272.689c-22.049-21.366-90.243-93.029-90.243-161.892 c0-49.784,40.483-90.287,90.243-90.287s90.243,40.503,90.243,90.287C238.743,179.659,170.549,251.322,148.5,272.689z'/%3E%3Cpath d='M148.5,59.183c-28.273,0-51.274,23.154-51.274,51.614c0,28.461,23.001,51.614,51.274,51.614 c28.273,0,51.274-23.153,51.274-51.614C199.774,82.337,176.773,59.183,148.5,59.183z M148.5,141.901 c-16.964,0-30.765-13.953-30.765-31.104c0-17.15,13.801-31.104,30.765-31.104c16.964,0,30.765,13.953,30.765,31.104 C179.265,127.948,165.464,141.901,148.5,141.901z'/%3E%3C/g%3E%3C/svg%3E");
  background-repeat: no-repeat;
  background-position: left center;
  left: 0;
  top: 0;
  bottom: 0;
  right: auto;
  width: 10px;
}
.galeryTitle__container .list-terms a {
  color: inherit;
}
.galeryTitle__container .list-terms > * {
  margin-right: 0.7rem;
  display: flex;
}
.galeryTitle__container .list-terms > *::after {
  content: ",";
  display: inline;
}
.galeryTitle__container .list-terms > *:last-child {
  margin-right: 0;
}
.galeryTitle__container .list-terms > *:last-child::after {
  content: ",";
  display: none;
}

.reinsuranceItem {
  max-width: 270px;
  text-align: center;
  margin: 0 auto 40px;
}
.reinsuranceItem__iconContainer {
  height: 80px;
  width: 80px;
  background-color: #f8f8f8;
  border-radius: 50%;
  border: 1px solid #efefef;
  margin: 0 auto 22px;
}
.reinsuranceItem__assistance {
  height: 80px;
  width: 80px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.reinsuranceItem__assistance svg {
  height: 60px;
  width: 60px;
}
.reinsuranceItem__title {
  margin-bottom: 13px;
  color: #1b1918;
  font-style: normal;
  font-weight: 700;
  font-size: 20px;
  line-height: 24px;
}
.reinsuranceItem__title span {
  color: #49a0a2;
}
.reinsuranceItem__description {
  color: #1b1918;
  font-weight: 300;
  font-size: 1em;
  line-height: 20px;
}

.projectSummary {
  display: flex;
  margin-bottom: 5rem;
  border-top: 1px solid rgba(160, 160, 160, 0.227);
}
@media only screen and (min-width: 1025px) {
  .projectSummary {
    margin-left: 5rem;
    margin-right: 5rem;
  }
}
.projectSummary__square {
  display: flex;
  width: 30%;
  padding: 2rem;
  justify-content: center;
  position: relative;
}
.projectSummary__square::after {
  content: "";
  height: 30%;
  width: 1px;
  display: flex;
  align-items: center;
  position: absolute;
  right: 0;
  top: 78px;
  background-color: rgba(160, 160, 160, 0.227);
}
@media only screen and (max-width: 575px) {
  .projectSummary__square::after {
    top: 50px;
  }
}
.projectSummary__square:last-child::after {
  width: 0;
}
.projectSummary__square .reinsuranceItem {
  margin: 0;
}
.projectSummary__square .reinsuranceItem p {
  margin: 0.5rem 0 0;
  color: #959595;
}
@media only screen and (max-width: 440px) {
  .projectSummary__square .reinsuranceItem p {
    font-size: 1.12rem;
    margin: 0;
  }
}
.projectSummary__square .reinsuranceItem__iconContainer {
  width: 90px;
  height: 90px;
  justify-content: center;
  display: flex;
  align-items: center;
  margin: 0;
}
@media only screen and (max-width: 575px) {
  .projectSummary__square .reinsuranceItem__iconContainer {
    width: 50px;
    height: 50px;
  }
}
.projectSummary__square .reinsuranceItem__assistance i {
  font-size: 4.2rem;
}
@media only screen and (max-width: 575px) {
  .projectSummary__square .reinsuranceItem__assistance i {
    font-size: 2.1rem;
  }
}
.projectSummary__square .reinsuranceItem__title {
  font-size: 2.8rem;
  font-weight: 300;
  margin-top: 2rem;
  margin-bottom: 0.5rem;
}
@media only screen and (max-width: 575px) {
  .projectSummary__square .reinsuranceItem__title {
    font-size: 1.68rem;
    margin-bottom: -5px;
  }
}
@media only screen and (max-width: 440px) {
  .projectSummary__square .reinsuranceItem__title {
    font-size: 1.12rem;
    margin: 0 0 -5px;
  }
}
.projectSummary__square .reinsuranceItem__title .number-unit {
  font-size: 2.1rem;
  color: black;
}
@media only screen and (max-width: 575px) {
  .projectSummary__square .reinsuranceItem__title .number-unit {
    font-size: 1.4rem;
  }
}

/* Slider */
.slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
}

.slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
}
.slick-list:focus {
  outline: none;
}
.slick-list.dragging {
  cursor: pointer;
  cursor: hand;
}

.slick-slider .slick-track,
.slick-slider .slick-list {
  -webkit-transform: translate3d(0, 0, 0);
  -moz-transform: translate3d(0, 0, 0);
  -ms-transform: translate3d(0, 0, 0);
  -o-transform: translate3d(0, 0, 0);
  transform: translate3d(0, 0, 0);
}

.slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block;
  margin-left: auto;
  margin-right: auto;
}
.slick-track:before, .slick-track:after {
  content: "";
  display: table;
}
.slick-track:after {
  clear: both;
}
.slick-loading .slick-track {
  visibility: hidden;
}

.slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none;
}
[dir=rtl] .slick-slide {
  float: right;
}
.slick-slide img {
  display: block;
}
.slick-slide.slick-loading img {
  display: none;
}
.slick-slide.dragging img {
  pointer-events: none;
}
.slick-initialized .slick-slide {
  display: block;
}
.slick-loading .slick-slide {
  visibility: hidden;
}
.slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}

.slick-arrow.slick-hidden {
  display: none;
}

/* Slider */
.slick-loading .slick-list {
  background: #fff url(../images/ajax-loader.gif) center center no-repeat;
}

/* Icons */
@font-face {
  font-family: "slick";
  src: url(../fonts/slick.a4e97f5a2a64f0ab132323fbeb33ae29.eot);
  src: url(../fonts/slick.a4e97f5a2a64f0ab132323fbeb33ae29.eot) format("embedded-opentype"), url(../fonts/slick.295183786cd8a138986521d9f388a286.woff) format("woff"), url(../fonts/slick.c94f7671dcc99dce43e22a89f486f7c2.ttf) format("truetype"), url(../icons/slick.svg) format("svg");
  font-weight: normal;
  font-style: normal;
}
/* Arrows */
.slick-prev,
.slick-next {
  position: absolute;
  display: block;
  height: 20px;
  width: 20px;
  line-height: 0px;
  font-size: 0px;
  cursor: pointer;
  background: transparent;
  color: transparent;
  top: 50%;
  -webkit-transform: translate(0, -50%);
  -ms-transform: translate(0, -50%);
  transform: translate(0, -50%);
  padding: 0;
  border: none;
  outline: none;
}
.slick-prev:hover, .slick-prev:focus,
.slick-next:hover,
.slick-next:focus {
  outline: none;
  background: transparent;
  color: transparent;
}
.slick-prev:hover:before, .slick-prev:focus:before,
.slick-next:hover:before,
.slick-next:focus:before {
  opacity: 1;
}
.slick-prev.slick-disabled:before,
.slick-next.slick-disabled:before {
  opacity: 0.25;
}
.slick-prev:before,
.slick-next:before {
  font-family: "slick";
  font-size: 20px;
  line-height: 1;
  color: white;
  opacity: 0.75;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.slick-prev {
  left: -25px;
}
[dir=rtl] .slick-prev {
  left: auto;
  right: -25px;
}
.slick-prev:before {
  content: "â";
}
[dir=rtl] .slick-prev:before {
  content: "â";
}

.slick-next {
  right: -25px;
}
[dir=rtl] .slick-next {
  left: -25px;
  right: auto;
}
.slick-next:before {
  content: "â";
}
[dir=rtl] .slick-next:before {
  content: "â";
}

/* Dots */
.slick-dotted.slick-slider {
  margin-bottom: 30px;
}

.slick-dots {
  position: absolute;
  bottom: -25px;
  list-style: none;
  display: block;
  text-align: center;
  padding: 0;
  margin: 0;
  width: 100%;
}
.slick-dots li {
  position: relative;
  display: inline-block;
  height: 20px;
  width: 20px;
  margin: 0 5px;
  padding: 0;
  cursor: pointer;
}
.slick-dots li button {
  border: 0;
  background: transparent;
  display: block;
  height: 20px;
  width: 20px;
  outline: none;
  line-height: 0px;
  font-size: 0px;
  color: transparent;
  padding: 5px;
  cursor: pointer;
}
.slick-dots li button:hover, .slick-dots li button:focus {
  outline: none;
}
.slick-dots li button:hover:before, .slick-dots li button:focus:before {
  opacity: 1;
}
.slick-dots li button:before {
  position: absolute;
  top: 0;
  left: 0;
  content: "â¢";
  width: 20px;
  height: 20px;
  font-family: "slick";
  font-size: 6px;
  line-height: 20px;
  text-align: center;
  color: black;
  opacity: 0.25;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.slick-dots li.slick-active button:before {
  color: black;
  opacity: 0.75;
}

.stanCaroussel {
  width: 100%;
  padding-top: 6rem;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: #FFF;
  z-index: 99999;
  margin-top: 100%;
  opacity: 0;
  transition: all 0.2s ease-in-out;
}
@media (prefers-reduced-motion: reduce) {
  .stanCaroussel {
    transition: none;
  }
}
.stanCaroussel.open {
  margin-top: 0;
  opacity: 1;
}
.stanCaroussel .close {
  font-size: 3.08rem;
  font-weight: 100;
  position: absolute;
  right: 53px;
  top: 49px;
  cursor: pointer;
  border-radius: 50%;
  width: 45px;
  height: 45px;
  display: flex;
  background: rgba(204, 204, 204, 0);
  align-items: center;
  justify-content: center;
}
.stanCaroussel .close::before {
  content: "+";
  display: inline-block;
  font-weight: 300;
  transform: rotateZ(-45deg);
}
.stanCaroussel .close:hover {
  background: rgba(204, 204, 204, 0.7);
}
.stanCaroussel .twoBlockCarousel {
  display: flex;
  margin: auto;
  padding: 0 4rem;
  justify-content: space-around;
  height: 100%;
  margin: auto;
  max-height: 70vh;
  align-items: flex-start;
}
@media only screen and (max-width: 768px) {
  .stanCaroussel .twoBlockCarousel {
    max-height: 80vh;
    padding: 0;
  }
}
.stanCaroussel .twoBlockCarousel .slick-dots li.slick-active button:before {
  color: #49a0a2;
}
.stanCaroussel .twoBlockCarousel .slick-dots {
  position: absolute;
  bottom: 12px;
}
.stanCaroussel .twoBlockCarousel .slick-dots li button:before {
  font-size: 1.26rem;
  color: #fff;
  opacity: 0.9;
}
.stanCaroussel .twoBlockCarousel .bigImage {
  width: 60%;
}
@media only screen and (min-width: 1201px) {
  .stanCaroussel .twoBlockCarousel .bigImage {
    width: 65%;
  }
}
@media only screen and (max-width: 768px) {
  .stanCaroussel .twoBlockCarousel .bigImage {
    width: 100%;
  }
}
.stanCaroussel .twoBlockCarousel .bigImage .rer {
  padding: 2px;
}
.stanCaroussel .twoBlockCarousel .bigImage .rer img {
  width: 100%;
}
.stanCaroussel .twoBlockCarousel .bigImage .slick-disabled {
  display: none;
  opacity: 0;
  top: -200px;
}
.stanCaroussel .twoBlockCarousel .secondBlock_number {
  font-size: 1.68rem;
  font-weight: 700;
  margin-top: 50px;
}
.stanCaroussel .twoBlockCarousel .secondBlock {
  width: 30%;
  margin: 2rem auto;
  display: flex;
  flex-direction: column;
}
@media only screen and (min-width: 1201px) {
  .stanCaroussel .twoBlockCarousel .secondBlock {
    width: 27%;
  }
}
@media only screen and (max-width: 768px) {
  .stanCaroussel .twoBlockCarousel .secondBlock {
    display: none;
  }
}
.stanCaroussel .twoBlockCarousel .secondBlock .smallCarousel {
  width: 100%;
}
.stanCaroussel .twoBlockCarousel .secondBlock .smallCarousel .slick-current img {
  border: 2px solid #49a0a2;
  border-radius: 2px;
}
.stanCaroussel .twoBlockCarousel .secondBlock .smallCarousel img {
  max-width: 70px;
  width: 100%;
  height: 60px;
}
@media only screen and (max-width: 991px) {
  .stanCaroussel .twoBlockCarousel .secondBlock .smallCarousel img {
    max-width: 50px;
    height: 50px;
  }
}
.stanCaroussel .twoBlockCarousel .secondBlock .smallCarousell {
  width: 110%;
  text-align: left;
}
.stanCaroussel .twoBlockCarousel .secondBlock .smallCarousell p {
  font-weight: 700;
  max-width: 400px;
  font-size: 1.54rem;
  line-height: 1.3;
  width: 100%;
  height: 60px;
}
@media only screen and (max-width: 991px) {
  .stanCaroussel .twoBlockCarousel .secondBlock .smallCarousell p {
    height: 50px;
  }
}
.stanCaroussel .title {
  font-weight: 700;
  font-size: 2.8rem;
  color: #1b1918;
  margin: 5px 4rem;
}
@media only screen and (max-width: 768px) {
  .stanCaroussel .title {
    font-size: 2.1rem;
    margin: 5px 1rem;
  }
}
.stanCaroussel .stan-next,
.stanCaroussel .stan-prev {
  opacity: 0.75;
  border-left: 4px solid;
  border-top: 4px solid;
  line-height: 0;
  position: absolute;
  top: 50%;
  z-index: 2;
  color: black;
  display: block;
  font-size: 0;
  width: 13px;
  height: 13px;
  padding: 0;
  cursor: pointer;
}
.stanCaroussel .stan-next {
  right: -25px;
  transform: rotate(140deg);
}
.stanCaroussel .stan-prev {
  transform: rotate(-45deg);
  left: -25px;
}

.seeMore {
  background: #fff;
  border: 2px solid #1b1918;
  border-radius: 2px;
  padding: 15px 20px;
  font-weight: 700;
  font-size: 12px;
  line-height: 14px;
  width: fit-content;
  margin: 50px auto 0;
  cursor: pointer;
}

ul.puce-check {
  margin: 0;
  padding: 0;
}
ul.puce-check li {
  position: relative;
  padding-left: 4rem;
  margin-bottom: 1rem;
}
ul.puce-check li::before {
  content: "";
  position: absolute;
  width: 25px;
  height: 25px;
  top: 0;
  left: 0;
  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='25px' height='25px' viewBox='0 0 25 25' fill='none'%3E%3Cpath d='M24.5 12.5C24.5 19.1274 19.1274 24.5 12.5 24.5C5.87258 24.5 0.5 19.1274 0.5 12.5C0.5 5.87258 5.87258 0.5 12.5 0.5C19.1274 0.5 24.5 5.87258 24.5 12.5Z' fill='%23F8F8F8' stroke='%23EFEFEF'%3E%3C/path%3E%3Cpath d='M10.3994 17.218C10.1816 17.218 9.98204 17.1454 9.81873 16.9821L6.20786 13.3712C5.88125 13.0446 5.88125 12.5365 6.20786 12.2099C6.53447 11.8833 7.04252 11.8833 7.36913 12.2099L10.4175 15.2402L17.6575 8.01839C17.9841 7.69178 18.4921 7.69178 18.8187 8.01839C19.1454 8.34501 19.1454 8.85308 18.8187 9.17969L10.9982 16.9821C10.8167 17.1454 10.6171 17.218 10.3994 17.218Z' fill='%233687c6'%3E%3C/path%3E%3C/svg%3E");
  background-repeat: no-repeat;
}

.expert-solution {
  background-color: #f8f8f8;
  padding: 8rem 0;
  margin-bottom: 8rem;
}
.expert-solution img {
  width: auto;
}
.expert-solution .profile {
  position: relative;
  display: flex;
  justify-content: space-around;
  flex-direction: column;
  align-items: center;
  margin-bottom: 4rem;
  max-width: 100%;
}
@media only screen and (min-width: 576px) {
  .expert-solution .profile {
    flex-direction: row;
  }
}
@media only screen and (min-width: 769px) {
  .expert-solution .profile {
    justify-content: left;
    margin-bottom: 0;
  }
}
.expert-solution .profile .profile_image {
  padding-right: 1rem;
}
@media only screen and (min-width: 769px) {
  .expert-solution .profile .profile_image {
    position: absolute;
    left: 0;
    top: 0;
    max-width: 290px;
    width: 100%;
  }
}
@media only screen and (min-width: 992px) {
  .expert-solution .profile {
    max-width: 60%;
  }
}
@media only screen and (min-width: 1201px) {
  .expert-solution .profile {
    max-width: 53%;
  }
}
.expert-solution .profile .profile__block {
  position: relative;
  text-align: center;
}
@media only screen and (min-width: 576px) {
  .expert-solution .profile .profile__block {
    text-align: left;
  }
}
@media only screen and (min-width: 769px) {
  .expert-solution .profile .profile__block {
    margin-left: calc(300px + 5%);
  }
}
.expert-solution .profile .seeMore {
  margin: 0 0 1.3333333333rem;
  background: #000;
}
.expert-solution .profile .seeMore a {
  color: #FFF;
}
.expert-solution .profile .profile_name_function {
  font-size: 3.22rem;
  font-weight: 600;
  margin-bottom: 4rem;
}
.expert-solution .profile .profile_name_function .profile_name {
  color: #3687c6;
  padding-right: 1rem;
}
.expert-solution .profile .title {
  font-size: 3.22rem;
}
.expert-solution .messages {
  position: relative;
  z-index: 1;
  flex-direction: column;
}
@media only screen and (min-width: 992px) {
  .expert-solution .messages {
    flex-direction: row;
  }
}
.expert-solution .messages .description {
  padding: 4rem 5rem;
  background: #FFF;
  font-size: 1.68rem;
  line-height: 1.95;
  font-weight: 500;
  margin-bottom: 5rem;
}
@media only screen and (min-width: 769px) {
  .expert-solution .messages .description {
    box-shadow: 0 0 20px 10px rgba(0, 0, 0, 0.08);
    max-width: 440px;
    margin-left: 14%;
  }
}
.expert-solution .block-avantages {
  font-size: 1.82rem;
  line-height: 2.08;
  align-self: center;
  max-width: 600px;
  font-weight: 400;
  padding-top: 3rem;
  border-top: 1px solid #dee2e6;
}
@media only screen and (min-width: 992px) {
  .expert-solution .block-avantages {
    max-width: 400px;
    border: none;
    padding: 0 0 0 3rem;
    margin-left: 5rem;
    border-left: 1px solid #dee2e6;
  }
}
.expert-solution .block-avantages .titre_avantage {
  margin-bottom: 1.3333333333rem;
}
.expert-solution .block-avantages .puce-check li {
  font-weight: 600;
  margin-bottom: 1rem;
}

.paragraphList {
  margin-bottom: 4rem;
  text-align: center;
}
.paragraphList ul {
  list-style: none;
  padding: 0;
}
.paragraphList ul li {
  margin-top: 5px;
  display: flex;
  justify-content: start;
  align-items: center;
}
.paragraphList ul li .list_icon {
  width: 25px;
  height: 25px;
  display: flex;
  justify-content: center;
  background-color: ghostwhite;
  align-items: center;
  border-radius: 20px;
  padding: 5px;
  color: teal;
  margin-right: 15px;
}
@media only screen and (max-width: 440px) {
  .paragraphList ul li .list_icon {
    width: 18px;
    height: 18px;
    font-size: 11px;
  }
}
.paragraphList ul li p {
  text-align: left;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 18px;
  color: #1b1918;
}
.paragraphList ul li p span {
  color: #49a0a2;
}

.serviceBlock-module {
  flex-basis: calc(50% - 15px);
  margin: 0 auto 5rem;
  width: 100%;
}
.serviceBlock-module__container {
  background: linear-gradient(36.64deg, #007891 14.08%, #49a0a2);
  display: flex;
  justify-content: center;
  align-items: center;
}
.serviceBlock-module__serviceMessage {
  background-color: #fff;
  margin: 4rem 5rem 6rem;
  padding: 2rem 2rem 6rem;
  position: relative;
  text-align: center;
  color: #1b1918;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__serviceMessage {
    margin: 4rem 3rem 6rem;
  }
}
.serviceBlock-module__serviceTitle {
  line-height: 1.105;
  margin-bottom: 4rem;
}
.serviceBlock-module__serviceDescription {
  font-weight: 400;
}
.serviceBlock-module__button {
  text-decoration: none;
  color: #fff;
  background: #1b1918;
  border-radius: 2px;
  font-style: normal;
  font-weight: 700;
  font-size: 1.54rem;
  line-height: 24px;
  padding: 10px 20px;
  bottom: 0;
  transform: translateY(18%);
  display: inline-block;
}
.serviceBlock-module__button a {
  color: #FFF;
}
.serviceBlock-module__button i {
  font-size: 1.4rem;
  font-weight: 200;
  margin-left: 10px;
}
@media only screen and (max-width: 991px) {
  .serviceBlock-module__button {
    margin-top: 10px;
    position: relative;
  }
}

.twentytwenty-vertical .twentytwenty-handle:after, .twentytwenty-vertical .twentytwenty-handle:before, .twentytwenty-horizontal .twentytwenty-handle:after, .twentytwenty-horizontal .twentytwenty-handle:before {
  content: " ";
  display: block;
  background: #fff;
  position: absolute;
  z-index: 30;
}

.twentytwenty-horizontal .twentytwenty-handle:after, .twentytwenty-horizontal .twentytwenty-handle:before {
  width: 3px;
  height: 9999px;
  left: 50%;
  margin-left: -1.5px;
}

.twentytwenty-vertical .twentytwenty-handle:after, .twentytwenty-vertical .twentytwenty-handle:before {
  width: 9999px;
  height: 3px;
  top: 50%;
  margin-top: -1.5px;
}

.twentytwenty-overlay, .twentytwenty-after-label, .twentytwenty-before-label {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
}

.twentytwenty-overlay, .twentytwenty-after-label, .twentytwenty-before-label {
  transition-duration: 0.5s;
}

.twentytwenty-after-label, .twentytwenty-before-label {
  transition-property: opacity;
}

.twentytwenty-after-label:before, .twentytwenty-before-label:before {
  color: #fff;
  font-size: 13px;
  letter-spacing: 0.1em;
}

.twentytwenty-after-label:before, .twentytwenty-before-label:before {
  position: absolute;
  background: rgba(255, 255, 255, 0.2);
  line-height: 38px;
  padding: 0 20px;
  border-radius: 2px;
}

.twentytwenty-horizontal .twentytwenty-after-label:before, .twentytwenty-horizontal .twentytwenty-before-label:before {
  top: 50%;
  margin-top: -19px;
}

.twentytwenty-vertical .twentytwenty-after-label:before, .twentytwenty-vertical .twentytwenty-before-label:before {
  left: 50%;
  margin-left: -45px;
  text-align: center;
  width: 90px;
}

.twentytwenty-down-arrow, .twentytwenty-up-arrow, .twentytwenty-right-arrow, .twentytwenty-left-arrow {
  width: 0;
  height: 0;
  border: 6px inset transparent;
  position: absolute;
}

.twentytwenty-right-arrow, .twentytwenty-left-arrow {
  top: 50%;
  margin-top: -6px;
}

.twentytwenty-down-arrow, .twentytwenty-up-arrow {
  left: 50%;
  margin-left: -6px;
}

.twentytwenty-container {
  box-sizing: content-box;
  z-index: 0;
  overflow: hidden;
  position: relative;
  -webkit-user-select: none;
  -moz-user-select: none;
}
.twentytwenty-container img {
  max-width: 100%;
  position: absolute;
  top: 0;
  display: block;
}
.twentytwenty-container.active .twentytwenty-overlay, .twentytwenty-container.active :hover.twentytwenty-overlay {
  background: rgba(0, 0, 0, 0);
}
.twentytwenty-container.active .twentytwenty-overlay .twentytwenty-before-label,
.twentytwenty-container.active .twentytwenty-overlay .twentytwenty-after-label, .twentytwenty-container.active :hover.twentytwenty-overlay .twentytwenty-before-label,
.twentytwenty-container.active :hover.twentytwenty-overlay .twentytwenty-after-label {
  opacity: 0;
}
.twentytwenty-container * {
  box-sizing: content-box;
}

.twentytwenty-before-label {
  opacity: 0;
}
.twentytwenty-before-label:before {
  content: attr(data-content);
}

.twentytwenty-after-label {
  opacity: 0;
}
.twentytwenty-after-label:before {
  content: attr(data-content);
}

.twentytwenty-horizontal .twentytwenty-before-label:before {
  left: 10px;
}

.twentytwenty-horizontal .twentytwenty-after-label:before {
  right: 10px;
}

.twentytwenty-vertical .twentytwenty-before-label:before {
  top: 10px;
}

.twentytwenty-vertical .twentytwenty-after-label:before {
  bottom: 10px;
}

.twentytwenty-overlay {
  transition-property: background;
  background: rgba(0, 0, 0, 0);
  z-index: 25;
}
.twentytwenty-overlay:hover {
  background: rgba(0, 0, 0, 0.5);
}
.twentytwenty-overlay:hover .twentytwenty-after-label {
  opacity: 1;
}
.twentytwenty-overlay:hover .twentytwenty-before-label {
  opacity: 1;
}

.twentytwenty-before {
  z-index: 20;
}

.twentytwenty-after {
  z-index: 10;
}

.twentytwenty-handle {
  height: 38px;
  width: 38px;
  position: absolute;
  left: 50%;
  top: 50%;
  margin-left: -22px;
  margin-top: -22px;
  border: 3px solid #fff;
  border-radius: 1000px;
  box-shadow: 0px 0px 12px rgba(51, 51, 51, 0.5);
  z-index: 40;
  cursor: pointer;
}

.twentytwenty-horizontal .twentytwenty-handle:before {
  bottom: 50%;
  margin-bottom: 22px;
  box-shadow: 0 3px 0 #fff, 0px 0px 12px rgba(51, 51, 51, 0.5);
}
.twentytwenty-horizontal .twentytwenty-handle:after {
  top: 50%;
  margin-top: 22px;
  box-shadow: 0 -3px 0 #fff, 0px 0px 12px rgba(51, 51, 51, 0.5);
}

.twentytwenty-vertical .twentytwenty-handle:before {
  left: 50%;
  margin-left: 22px;
  box-shadow: 3px 0 0 #fff, 0px 0px 12px rgba(51, 51, 51, 0.5);
}
.twentytwenty-vertical .twentytwenty-handle:after {
  right: 50%;
  margin-right: 22px;
  box-shadow: -3px 0 0 #fff, 0px 0px 12px rgba(51, 51, 51, 0.5);
}

.twentytwenty-left-arrow {
  border-right: 6px solid #fff;
  left: 50%;
  margin-left: -17px;
}

.twentytwenty-right-arrow {
  border-left: 6px solid #fff;
  right: 50%;
  margin-right: -17px;
}

.twentytwenty-up-arrow {
  border-bottom: 6px solid #fff;
  top: 50%;
  margin-top: -17px;
}

.twentytwenty-down-arrow {
  border-top: 6px solid #fff;
  bottom: 50%;
  margin-bottom: -17px;
}

.main-twentytwenty .buttons .seeMore {
  margin: 0 0 1.3333333333rem;
  border: 1px solid #dee2e6;
  color: #666666;
  background-color: #FFF;
  font-weight: 400;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.main-twentytwenty .buttons .seeMore.after-before {
  margin-right: 1rem;
}
.main-twentytwenty .buttons .seeMore.active {
  background-color: #3687c6;
  border-color: #3687c6;
  color: #fff;
}

.container-zurb-twentytwenty .zurb-twentytwenty {
  max-width: 1000px;
  margin-left: auto;
  margin-right: auto;
}
.container-zurb-twentytwenty img {
  width: 100%;
}

.table-budjet {
  width: 100%;
  max-width: 970px;
  margin-left: auto;
  margin-right: auto;
}
.table-budjet tr:nth-child(2n) {
  background: #f8f8f8;
}
.table-budjet th {
  padding: 2rem 0 2rem 2rem;
}
.table-budjet td {
  padding: 2rem 2rem 2rem 0;
}
.table-budjet--title,
.table-budjet .table-budjet--tableData--1rz3U {
  font-size: 1.652rem;
  font-weight: 400;
}
.table-budjet--totalPrice {
  font-size: 3.5rem;
  font-weight: 600;
  color: #3687c6;
}
.table-budjet--description, .table-budjet--totalPriceDescription, .table-budjet--totalText {
  font-size: 1.186440678rem;
  color: #999999;
}
.table-budjet td {
  text-align: right;
}

.block-title {
  text-align: center;
}

.serviceBlock-module {
  max-width: 770px;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/