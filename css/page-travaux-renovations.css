@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
.page-header-bg {
  padding: 4rem 0;
  min-height: 200px;
  margin-bottom: 6rem;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h1 {
  font-size: 3.4rem;
  margin: 0 0 1.5037593985rem;
  line-height: 4.2rem;
}
@media only screen and (min-width: 992px) {
  h1 {
    font-size: 4.216rem;
  }
}

p {
  font-size: inherit;
  margin: 0 0 1.3333333333rem;
}

.header-blog {
  margin-bottom: 5rem;
  font-size: 2.646rem;
  line-height: 1.1;
  text-align: center;
}
@media only screen and (min-width: 992px) {
  .header-blog {
    text-align: left;
    font-size: 1.848rem;
    line-height: 1.65;
  }
}
.header-blog p {
  font-size: inherit;
  margin-bottom: 0;
}

.header-blog p {
  margin-bottom: 2rem;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFuLWNvbXBpbGVyLy4vcGFnZS10cmF2YXV4LXJlbm92YXRpb25zLnNjc3MiLCJ3ZWJwYWNrOi8vc3Rhbi1jb21waWxlci8uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL192YXJpYWJsZXMuc2NzcyIsIndlYnBhY2s6Ly9zdGFuLWNvbXBpbGVyLy4vQXBwVnVlanMvd2J1LWF0b21pcXVlL3Njc3MvZGVmYXV0L21peGlucy9jb21wb25lbnRzLnNjc3MiLCJ3ZWJwYWNrOi8vc3Rhbi1jb21waWxlci8uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL3didS1yZXNzb3VyY2VzLnNjc3MiLCJ3ZWJwYWNrOi8vc3Rhbi1jb21waWxlci8uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL29yZ2FuaXNtZS9zZWN0aW9ucy9wYWdlLWhlYWRlci1iZy5zY3NzIiwid2VicGFjazovL3N0YW4tY29tcGlsZXIvLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9hdG9tZS90eXBvZ3JhcGh5L19kZWZhdWx0LnNjc3MiLCJ3ZWJwYWNrOi8vc3Rhbi1jb21waWxlci8uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL2F0b21lL3R5cG9ncmFwaHkvdGl0bGUuc2NzcyIsIndlYnBhY2s6Ly9zdGFuLWNvbXBpbGVyLy4vQXBwVnVlanMvd2J1LWF0b21pcXVlL3Njc3MvYXRvbWUvdHlwb2dyYXBoeS9oMS5zY3NzIiwid2VicGFjazovL3N0YW4tY29tcGlsZXIvLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9kZWZhdXQvbW9kZWwvY3VzdG9tX2JwLnNjc3MiLCJ3ZWJwYWNrOi8vc3Rhbi1jb21waWxlci8uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL2F0b21lL3R5cG9ncmFwaHkvcC5zY3NzIiwid2VicGFjazovL3N0YW4tY29tcGlsZXIvLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9tb2xlY3VsZS9zdGVwaC9oZWFkZXItYmxvZy5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQ0FoQjs7RUFBQTtBQVlBO0FBSUE7QUFJQTs7RUFBQTtBQU1BOztFQUFBO0FBYUE7O0VBQUE7QUFJQTtBQU9BO0FBRUE7QUNwREE7O0VBQUE7QUF5QkE7OztFQUFBO0FBZ0JBOztFQUFBO0FBd0VBOztFQUFBO0FBOEJBOztDQUFBO0FBUUE7O0NBQUE7QUFtQkE7O0NBQUE7QUFtQkE7O0VBQUE7QUFVQTs7RUFBQTtBQW9GQTs7RUFBQTtBQTBCQTs7O0VBQUE7QUF3QkE7O0VBQUE7QUFrQkE7O0VBQUE7QUEyREE7O0VBQUE7QUNwWkE7QUNKQTtFQUNFO0VBQ0EsaUJIK0M2QjtFRzlDN0I7QUo4REY7O0FLakVBOztFQUVFLGlCSm9CNkI7RUluQjdCO0VBQ0EsZ0JKaUI2QjtFSWhCN0I7RUFDQTtBTG9FRjs7QUtqRUE7RUFDRTtFQUNBO0FMb0VGOztBTS9FQTs7Q0FBQTtBQUtBOzs7Ozs7Ozs7Ozs7RUFZRSxvQkxXNkI7RUtWN0IsZ0JMVzZCO0VLVjdCO0VBQ0E7RUFDQSxjTE02QjtBRDBFL0I7O0FPbkdBO0VBQ0UsaUJOMkI2QjtFTTFCN0I7RUFDQSxtQk4wQjZCO0FENEUvQjtBUW5ESTtFRHRESjtJQUtJO0VQd0dGO0FBQ0Y7O0FTL0dBO0VBQ0Usa0JScUI2QjtFUXBCN0I7QVRrSEY7O0FVbkhBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7QVZzSEY7QVFwRUk7RUV0REo7SUFNSTtJQUNBO0lBQ0E7RVZ3SEY7QUFDRjtBVXRIRTtFQUNFO0VBQ0E7QVZ3SEo7O0FBcElBO0VBQ0UsbUJDdUM2QjtBRGdHL0IsQyIsImZpbGUiOiIuL2Nzcy9wYWdlLXRyYXZhdXgtcmVub3ZhdGlvbnMuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQHVzZSBcIkBzdGVwaGFuZTg4OC93YnUtYXRvbWlxdWUvc2Nzcy93YnUtcmVzc291cmNlcy5zY3NzXCIgYXMgKjtcbkB1c2UgXCIuL3ZhcmlhYmxlcy5zY3NzXCIgYXMgKjtcbkB1c2UgXCJAc3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlL3Njc3Mvb3JnYW5pc21lL3NlY3Rpb25zL3BhZ2UtaGVhZGVyLWJnXCI7XG5AdXNlIFwiQHN0ZXBoYW5lODg4L3didS1hdG9taXF1ZS9zY3NzL21vbGVjdWxlL3N0ZXBoL2hlYWRlci1ibG9nLnNjc3NcIjtcblxuLmhlYWRlci1ibG9nIHAge1xuICBtYXJnaW4tYm90dG9tOiAkd2J1LW1hcmdpbjtcbn0iLCIvKipcbiAqIGNvbG9yIGRlIGJhc2VcbiAqL1xuJHdidS1ib3JkZXItY29sb3IgICAgICAgICAgICA6ICNkZWUyZTYgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLXByaW1hcnkgICAgICAgICAgIDogI2VhMDAwZCAhZGVmYXVsdDtcbiR3YnUtY29sb3Itc2Vjb25kYXJ5ICAgICAgICAgOiAjMDAwMGVlICFkZWZhdWx0O1xuJHdidS1jb2xvci10aGlyZGx5ICAgICAgICAgICA6ICMzMzMgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLXRleHQgICAgICAgICAgICAgIDogIzRjNGM0YyAhZGVmYXVsdDtcbiR3YnUtY29sb3ItdGVhbCAgICAgICAgICAgICAgOiAjNDlhMGEyICFkZWZhdWx0O1xuJHdidS1jb2xvci1ib2RlciAgICAgICAgICAgICA6ICNkZWUyZTY7XG4kd2J1LWNvbG9yLWxpbmsgICAgICAgICAgICAgIDogJHdidS1jb2xvci1zZWNvbmRhcnkgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLWxpbmstaG92ZXIgICAgICAgIDogJHdidS1jb2xvci1zZWNvbmRhcnkgIWRlZmF1bHQ7XG4vKiovXG4kd2J1LWJ0bi1ib3JkZXItcm91bmQgICAgICAgIDogNTAlICFkZWZhdWx0O1xuJHdidS1idG4tcm91bmQtZGltZW5zaW9uICAgICA6IDIuMnJlbSAhZGVmYXVsdDtcbiRidG4tYm9yZGVyLWNvbG9yICAgICAgICAgICAgOiAkd2J1LWJvcmRlci1jb2xvciAhZGVmYXVsdDtcbi8qKi9cbi8vJGJ0bi1yYWRpdXNcbiR3YnUtYnRuLWJvcmRlci1yYWRpdXMgICAgICAgOiAzMHB4ICFkZWZhdWx0O1xuJHdidS1idG4tcmFkaXVzLXBhZGRpbmcgICAgICA6IDAuODhyZW0gMS41cmVtICFkZWZhdWx0O1xuLyoqXG4gKiBUeXBvZ3JhcGh5XG4gKi9cbiR3YnUtZGVmYXVsdC1saW5lLWhlaWdodCAgICAgOiAxLjMgIWRlZmF1bHQ7XG4kd2J1LWRlZmF1bHQtZm9udC1zaXplICAgICAgIDogMS40cmVtICFkZWZhdWx0O1xuJHdidS1wLWZvbnQtc2l6ZSAgICAgICAgICAgICA6IGluaGVyaXQgIWRlZmF1bHQ7XG4vKipcbiAqIHR5cG9ncmFwaHlcbiAqL1xuJHdidS10aXRsZS1jb2xvciAgICAgICAgICAgICA6IGluaGVyaXQgIWRlZmF1bHQ7XG4kd2J1LXRpdGxlLWZvbnQtZmFtaWx5ICAgICAgIDogaW5oZXJpdCAhZGVmYXVsdDtcbiR3YnUtdGl0bGUtZm9udC13ZWlnaHQgICAgICAgOiA2MDAgIWRlZmF1bHQ7IC8vXG4kd2J1LWgxLWZvbnQtc2l6ZSAgICAgICAgICAgIDogMy40cmVtICFkZWZhdWx0O1xuJHdidS1oMS1saW5lLWhlaWdodCAgICAgICAgICA6IDQuMnJlbSAhZGVmYXVsdDtcbiR3YnUtaDItZm9udC1zaXplICAgICAgICAgICAgOiAyLjRyZW0gIWRlZmF1bHQ7XG4kd2J1LWgzLWZvbnQtc2l6ZSAgICAgICAgICAgIDogMS44cmVtICFkZWZhdWx0O1xuJHdidS1oMy1saW5lLWhlaWdodCAgICAgICAgICA6IDIuNHJlbSAhZGVmYXVsdDtcbiR3YnUtaDQtZm9udC1zaXplICAgICAgICAgICAgOiAxLjZyZW0gIWRlZmF1bHQ7XG4kd2J1LWg0LWxpbmUtaGVpZ2h0ICAgICAgICAgIDogMi4wcmVtICFkZWZhdWx0O1xuLyoqXG4gKiBMaXN0cyBidXR0b25zXG4gKi9cbiR3YnVfZGltZW5zaW9uX3B1Y2UgICAgICAgICAgOiAyNXB4ICFkZWZhdWx0O1xuLyogKi9cbi8vIHNwYWNlLlxuJHdidS1tYXJnaW4gICAgICAgICAgICAgICAgICA6IDJyZW0gIWRlZmF1bHQ7XG4kd2J1LWgxLW1hcmdpbiAgICAgICAgICAgICAgIDogJHdidS1tYXJnaW4gLyAxLjMzICFkZWZhdWx0O1xuJHdidS1oMi1tYXJnaW4gICAgICAgICAgICAgICA6ICR3YnUtbWFyZ2luIC8gMS42ICFkZWZhdWx0O1xuJHdidS1oMy1tYXJnaW4gICAgICAgICAgICAgICA6ICR3YnUtbWFyZ2luIC8gMS45ICFkZWZhdWx0O1xuJHdidS1oNC1tYXJnaW4gICAgICAgICAgICAgICA6ICR3YnUtbWFyZ2luIC8gMi4yICFkZWZhdWx0O1xuLyogcGFnZS1oZWFkZXItYmcgKi9cbiR3YnUtcGFnZS1oZWFkZXItYmcgICAgICAgICAgOiAyMDBweDtcbi8qIFBlcm1ldCBkZSBzdXJjaGFyZ2VyIGxlcyB2YXJpYWJsZXMgYm9vdHN0cmFwICovXG4vLyBib290c3RyYXAgdmFyaWFibGVzXG4kd2J1LWlucHV0LWZvbnQtc2l6ZSAgICAgICAgIDogaW5oZXJpdCAhZGVmYXVsdDtcbiR3YnUtYnRuLWxpbmUtaGVpZ2h0ICAgICAgICAgOiBpbmhlcml0ICFkZWZhdWx0O1xuJHdidS1idG4tZm9udC1zaXplICAgICAgICAgICA6IGluaGVyaXQgIWRlZmF1bHQ7XG4kd2J1LWZvcm0tZ3JvdXAtbWFyZ2luLWJvdHRvbTogJHdidS1tYXJnaW47XG4kd2J1LWJ0bi1wYWRkaW5nLXktc20gICAgICAgIDogMC40cmVtICFkZWZhdWx0O1xuJHdidS1idG4tcGFkZGluZy14LXNtICAgICAgICA6IDAuOHJlbSAhZGVmYXVsdDtcbiR3YnUtYnRuLWZvbnQtc2l6ZS1zbSAgICAgICAgOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplLzEuMyAhZGVmYXVsdDsiLCIvKipcbiAqIENoYXJnZW1lbnQgcHJvZ3Jlc3NpZlxuICovXG5AbWl4aW4gbG9hZF9wcm9ncmVzc2l2ZV9pbWFnZSgpIHtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR6LWluZGV4IDogMTtcblxuXHQmOjphZnRlciB7XG5cdFx0Y29udGVudCAgIDogXCJcIjtcblx0XHRwb3NpdGlvbiAgOiBhYnNvbHV0ZTtcblx0XHR0b3AgICAgICAgOiAwO1xuXHRcdGxlZnQgICAgICA6IDA7XG5cdFx0Ym90dG9tICAgIDogMDtcblx0XHRyaWdodCAgICAgOiAwO1xuXHRcdHotaW5kZXggICA6IC0xO1xuXHRcdGZpbHRlcjogYmx1cigxMHB4KTtcblx0XHRiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7XG5cdFx0dHJhbnNpdGlvbjogYWxsIDQwMG1zLCAtd2Via2l0LWJhY2tkcm9wLWZpbHRlciA0MDBtcywgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXIgNDAwbXM7XG5cdH1cblxuXHQmLmxhenlsb2FkZWQ6OmFmdGVyIHtcblx0XHRmaWx0ZXI6IG5vbmU7XG5cdFx0YmFja2Ryb3AtZmlsdGVyOiBub25lO1xuXHR9XG59XG4vKipcbiAqIEFmZmljaGFnZSBkZSBsYSBsYW5ndWUuXG4gKiBNb2RlbCBzaW1wbGUuXG4gKi9cbkBtaXhpbiBzZWxlY3RfbGFuZ3VlKCRwYWRkaW5nOjAuM2VtKSB7XG5cdC5uYXYtbGluayB7XG5cdFx0cGFkZGluZyAgICAgICA6ICRwYWRkaW5nO1xuXHRcdGNvbG9yICAgICAgICAgOiAkdGV4dF9ub3JtYWw7XG5cdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0fVxuXG5cdC5uYXYtbGluay5hY3RpdmUsXG5cdC5uYXYtbGluay5pcy1hY3RpdmUge1xuXHRcdGNvbG9yOiAkbGlua19jb2xvcjtcblx0fVxufVxuLyoqXG4gKlxuICovXG5AbWl4aW4gZWZmZXRfYm91dHRvbigkY29sb3I6JGNvbG9yMiwgJGNvbG9yX2hvdmVyOiRjb2xvcjIpIHtcblx0ZGlzcGxheSAgICAgIDogZmxleDtcblx0YWxpZ24taXRlbXMgIDogY2VudGVyO1xuXHRtYXJnaW4tdG9wICAgOiAxZW07XG5cdG1hcmdpbi1ib3R0b206IDAuOGVtO1xuXHRAaW5jbHVkZSBtZWRpYS1taW4oREQpIHtcblx0XHRtYXJnaW4tdG9wICAgOiAtM3B4O1xuXHRcdHBhZGRpbmctbGVmdCA6IDJlbTtcblx0XHRtYXJnaW4tYm90dG9tOiAwO1xuXHR9XG5cblx0PiBhIHtcblx0XHRwYWRkaW5nICAgICAgOiAwLjllbSAyZW07XG5cdFx0Ym9yZGVyICAgICAgIDogMXB4IHNvbGlkICRjb2xvcjtcblx0XHRib3JkZXItcmFkaXVzOiAyNXB4O1xuXHRcdGNvbG9yICAgICAgICA6ICRjb2xvcjtcblx0XHRAaW5jbHVkZSBXQlV0cmFuc2l0aW9uKCk7XG5cdH1cblxuXHQmOmhvdmVyIHtcblx0XHQ+IGEge1xuXHRcdFx0Ym9yZGVyLWNvbG9yOiAkY29sb3JfaG92ZXI7XG5cdFx0XHRjb2xvciAgICAgICA6ICNmZmZmZmY7XG5cdFx0XHRiYWNrZ3JvdW5kICA6ICRjb2xvcl9ob3Zlcjtcblx0XHR9XG5cdH1cbn1cbkBtaXhpbiBMYWJlbEFkZFJlcXVpcmVkU3RhcigkY29sb3Jfc3Rhcikge1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cblx0Jjo6YWZ0ZXIge1xuXHRcdGNvbnRlbnQgICAgOiBcIipcIjtcblx0XHRwYWRkaW5nICAgIDogMCAwLjVlbTtcblx0XHRjb2xvciAgICAgIDogJGNvbG9yX3N0YXI7XG5cdFx0cG9zaXRpb24gICA6IGFic29sdXRlO1xuXHRcdHJpZ2h0ICAgICAgOiAtMWVtO1xuXHRcdGZvbnQtc2l6ZSAgOiAxLjhlbTtcblx0XHR0b3AgICAgICAgIDogMDtcblx0XHRsaW5lLWhlaWdodDogMS4xO1xuXHRcdGRpc3BsYXkgICAgOiBibG9jaztcblx0fVxufVxuQG1peGluIHJlcXVpcmVkRmllbGRGb3JtKCRjb2xvcl9zdGFyOiAkY29sb3IxKSB7XG5cdGxhYmVsLmZvcm0tcmVxdWlyZWQge1xuXHRcdEBpbmNsdWRlIExhYmVsQWRkUmVxdWlyZWRTdGFyKCRjb2xvcl9zdGFyKTtcblx0fVxuXG5cdC5qcy1mb3JtLXR5cGUtY2hlY2tib3gge1xuXHRcdGlucHV0LnJlcXVpcmVkICsgbGFiZWwge1xuXHRcdFx0QGluY2x1ZGUgTGFiZWxBZGRSZXF1aXJlZFN0YXIoJGNvbG9yX3N0YXIpO1xuXG5cdFx0XHQmOjphZnRlciB7XG5cdFx0XHRcdGRpc3BsYXkgOiBpbmxpbmUtYmxvY2s7XG5cdFx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRcdFx0cGFkZGluZyA6IDA7XG5cdFx0XHRcdGhlaWdodCAgOiAxN3B4O1xuXHRcdFx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHRcdFx0XHRyaWdodCAgIDogLTJweDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Lypcblx0XHRsYWJlbDo6YWZ0ZXJ7ZGlzcGxheTogbm9uZTt9XG5cdFx0aW5wdXR7XG5cdFx0XHRAaW5jbHVkZSBMYWJlbEFkZFJlcXVpcmVkU3RhcigpO1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdH1cblx0Ki9cblx0fVxufVxuLyoqXG4gKiBDYXJkIHJvdGF0aW9uXG4gKi9cbkBtaXhpbiBjYXJkX3JvdGF0aW9uKCRiYWNrZ3JvdW5kX2JnOiMzYzUyNjUpIHtcblx0cGFkZGluZyAgICAgIDogMDtcblx0Ym9yZGVyICAgICAgIDogbm9uZTtcblx0Ym9yZGVyLXJhZGl1czogMDtcblx0Ly9vdmVyZmxvdzogaGlkZGVuO1xuXHRAaW5jbHVkZSByb3RhdGVQZXJwZWN0aXZlKCR3aWR0aDogMjkycHgsICRoZWlnaHQ6IDQwMHB4LCAkdGltZTogMC41cyk7XG5cblx0LmNhcmQtaGVhZGVyIHtcblx0XHRwYWRkaW5nICAgICAgOiAwO1xuXHRcdGJvcmRlciAgICAgICA6IG5vbmU7XG5cdFx0Ym9yZGVyLXJhZGl1czogMDtcblx0XHRtYXgtaGVpZ2h0ICAgOiA0MDBweDtcblx0XHRvdmVyZmxvdyAgICAgOiBoaWRkZW47XG5cblx0XHRpbWcge1xuXHRcdFx0bWF4LXdpZHRoOiAzNTBweDtcblx0XHR9XG5cdH1cblxuXHQuY2FyZC1ib2R5IHtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHR9XG5cblx0LmNhcmQtdGV4dCB7XG5cdFx0cGFkZGluZy1ib3R0b206IDEuNWVtO1xuXHR9XG59XG4vKipcbiogdHJhbnNsYXRpb24gb24gaG92ZXJcbiovXG5AbWl4aW4gV0JVdHJhbnNpdGlvbigkcHJvcHJpZXRlOmFsbCwgJHRlbXBzOjAuM3MsICRzdHlsZTplYXNlLWluLW91dCkge1xuXHR0cmFuc2l0aW9uLXByb3BlcnR5ICAgICAgIDogJHByb3ByaWV0ZTtcblx0dHJhbnNpdGlvbi1kdXJhdGlvbiAgICAgICA6ICR0ZW1wcztcblx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246ICRzdHlsZTtcbn1cbi8qKlxuKiBCZWZvcmUgY292ZXJcbiovXG5AbWl4aW4gYmVmb3JlQ292ZXIoJGJnX2NvbG9yOiByZ2JhKDUsIDEyLCAyOSwgMC40KSwgJHppbmRleDogMCkge1xuXHR6LWluZGV4IDogMjtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXG5cdCY6OmJlZm9yZSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJGJnX2NvbG9yO1xuXHRcdHotaW5kZXggICAgICAgICA6ICR6aW5kZXg7XG5cdFx0cmlnaHQgICAgICAgICAgIDogMDtcblx0XHRib3R0b20gICAgICAgICAgOiAwO1xuXHRcdGRpc3BsYXkgICAgICAgICA6IGJsb2NrO1xuXHRcdGxlZnQgICAgICAgICAgICA6IDA7XG5cdFx0dG9wICAgICAgICAgICAgIDogMDtcblx0XHRwb3NpdGlvbiAgICAgICAgOiBhYnNvbHV0ZTtcblx0XHRjb250ZW50ICAgICAgICAgOiAnJztcblx0fVxufVxuLyoqXG4qIEJlZm9yZSBjb3ZlclxuKi9cbkBtaXhpbiBhZnRlckNvdmVyKCRiZ19jb2xvcjogcmdiYSg1LCAxMiwgMjksIDAuNCkpIHtcblx0ei1pbmRleCA6IDI7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuXHQmOjphZnRlciB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJGJnX2NvbG9yO1xuXHRcdHotaW5kZXggICAgICAgICA6IDA7XG5cdFx0cmlnaHQgICAgICAgICAgIDogMDtcblx0XHRib3R0b20gICAgICAgICAgOiAwO1xuXHRcdGRpc3BsYXkgICAgICAgICA6IGJsb2NrO1xuXHRcdGxlZnQgICAgICAgICAgICA6IDA7XG5cdFx0dG9wICAgICAgICAgICAgIDogMDtcblx0XHRwb3NpdGlvbiAgICAgICAgOiBhYnNvbHV0ZTtcblx0XHRjb250ZW50ICAgICAgICAgOiAnJztcblx0fVxufVxuLyoqXG4gKiAgcGFzIGRlIHJldG91ciDDoCBsYSBsaWduZVxuICovXG5AbWl4aW4gbm90YmFja2xpbmUoJHdpZHRoOjEwMHB4KSB7XG5cdGhlaWdodCAgICAgICA6IGF1dG87XG5cdHdpZHRoICAgICAgICA6ICR3aWR0aDtcblx0b3ZlcmZsb3cgICAgIDogaGlkZGVuO1xuXHR3aGl0ZS1zcGFjZSAgOiBub3dyYXA7XG5cdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xufVxuLyoqXG4gKiAgbWl4aW4gZm9yIG11bHRpbGluZSBsaW1pdCB0ZXh0IGNzc1xuICovXG5AbWl4aW4gbXVsdGlMaW5lRWxsaXBzaXMoJGxpbmVIZWlnaHQ6MS4yZW0sICRsaW5lQ291bnQ6IDEsICRiZ0NvbG9yOiB3aGl0ZSwgJHRleHQtYWxpZ246bGVmdCwgJG9wYWNpdHk6MC41LCAkZWxsaXBzaXMtbWFyZ2luLXJpZ2h0OjApIHtcblx0b3ZlcmZsb3cgICAgICAgICAgICAgICAgIDogaGlkZGVuO1xuXHRkaXNwbGF5ICAgICAgICAgICAgICAgICAgOiBibG9jaztcblx0cG9zaXRpb24gICAgICAgICAgICAgICAgIDogcmVsYXRpdmU7XG5cdGxpbmUtaGVpZ2h0ICAgICAgICAgICAgICA6ICRsaW5lSGVpZ2h0O1xuXHRtYXgtaGVpZ2h0ICAgICAgICAgICAgICAgOiAkbGluZUhlaWdodCAqICRsaW5lQ291bnQ7XG5cdHRleHQtYWxpZ24gICAgICAgICAgICAgICA6ICR0ZXh0LWFsaWduO1xuXHRtYXJnaW4tcmlnaHQgICAgICAgICAgICAgOiAtMC41ZW07XG5cdHBhZGRpbmctcmlnaHQgICAgICAgICAgICA6IDAuNWVtO1xuXHR3b3JkLWJyZWFrICAgICAgICAgICAgICAgOiBicmVhay1hbGw7XG5cdCRtdWx0aUxpbmVFbGxpcHNpc19iZWZvcmU6ICRsaW5lSGVpZ2h0ICogJGxpbmVDb3VudDtcblxuXHQmOmJlZm9yZSB7XG5cdFx0Y29udGVudCAgICAgOiAnLi4uJztcblx0XHRwb3NpdGlvbiAgICA6IGFic29sdXRlO1xuXHRcdHJpZ2h0ICAgICAgIDogMDtcblx0XHR0b3AgICAgICAgICA6IC0xZW07XG5cdFx0b3BhY2l0eSAgICAgOiAkb3BhY2l0eTtcblx0XHR6LWluZGV4ICAgICA6IDE7XG5cdFx0d2lkdGggICAgICAgOiAxZW07XG5cdFx0aGVpZ2h0ICAgICAgOiAxZW07XG5cdFx0bWFyZ2luLXJpZ2h0OiAkZWxsaXBzaXMtbWFyZ2luLXJpZ2h0O1xuXHRcdG1hcmdpbi10b3AgIDogY2FsYygjeyRtdWx0aUxpbmVFbGxpcHNpc19iZWZvcmV9IC0gMXB4KTtcblx0fVxuXG5cdCY6YWZ0ZXIge1xuXHRcdGNvbnRlbnQgICAgIDogJyc7XG5cdFx0cG9zaXRpb24gICAgOiBhYnNvbHV0ZTtcblx0XHRyaWdodCAgICAgICA6IDA7XG5cdFx0dG9wICAgICAgICAgOiAtMWVtO1xuXHRcdHdpZHRoICAgICAgIDogMWVtO1xuXHRcdGhlaWdodCAgICAgIDogMWVtO1xuXHRcdG1hcmdpbi10b3AgIDogJGxpbmVIZWlnaHQgKiAkbGluZUNvdW50O1xuXHRcdGJhY2tncm91bmQgIDogJGJnQ29sb3I7XG5cdFx0bWFyZ2luLXJpZ2h0OiAkZWxsaXBzaXMtbWFyZ2luLXJpZ2h0O1xuXHR9XG59XG4vL2h0dHBzOi8vY29kZXBlbi5pby93YWJlc2hldy9wZW4vWGRiQmRNXG5AbWl4aW4gd2FpdGluZ2JvdWxlKCkge1xuXHQkd2lkdGggICAgICAgIDogMTVweDtcblx0JGhlaWdodCAgICAgICA6IDE1cHg7XG5cdCRib3VuY2VfaGVpZ2h0OiAzMHB4O1xuXG5cdC5ib3VuY2ViYWxsIHtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0ZGlzcGxheSA6IGlubGluZS1ibG9jaztcblx0XHRoZWlnaHQgIDogMzdweDtcblx0XHR3aWR0aCAgIDogJHdpZHRoO1xuXG5cdFx0JjpiZWZvcmUge1xuXHRcdFx0cG9zaXRpb24gICAgICAgIDogYWJzb2x1dGU7XG5cdFx0XHRjb250ZW50ICAgICAgICAgOiAnJztcblx0XHRcdGRpc3BsYXkgICAgICAgICA6IGJsb2NrO1xuXHRcdFx0dG9wICAgICAgICAgICAgIDogMDtcblx0XHRcdHdpZHRoICAgICAgICAgICA6ICR3aWR0aDtcblx0XHRcdGhlaWdodCAgICAgICAgICA6ICRoZWlnaHQ7XG5cdFx0XHRib3JkZXItcmFkaXVzICAgOiA1MCU7XG5cdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAjZmJhZTE3O1xuXHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogNTAlO1xuXHRcdFx0YW5pbWF0aW9uICAgICAgIDogYm91bmNlIDUwMG1zIGFsdGVybmF0ZSBpbmZpbml0ZSBlYXNlO1xuXHRcdH1cblx0fVxuXHRAa2V5ZnJhbWVzIGJvdW5jZSB7XG5cdFx0MCUge1xuXHRcdFx0dG9wICAgICAgICAgIDogJGJvdW5jZV9oZWlnaHQ7XG5cdFx0XHRoZWlnaHQgICAgICAgOiA1cHg7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA2MHB4IDYwcHggMjBweCAyMHB4O1xuXHRcdFx0dHJhbnNmb3JtICAgIDogc2NhbGVYKDIpO1xuXHRcdH1cblxuXHRcdDM1JSB7XG5cdFx0XHRoZWlnaHQgICAgICAgOiAkaGVpZ2h0O1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXHRcdFx0dHJhbnNmb3JtICAgIDogc2NhbGVYKDEpO1xuXHRcdH1cblxuXHRcdDEwMCUge1xuXHRcdFx0dG9wOiAwO1xuXHRcdH1cblx0fVxufVxuLyohXG4gKiAubGlzdC1lbGVtZW50e0BpbmNsdWRlIGxpc3QtZWxlbWVudCgoJHBhZGRpbmdZOjEwcHgsICRwYWRkaW5nWDo1cHgsICRib3JkZXJXOjFweCkpO31cbiAqL1xuQG1peGluIGxpc3QtZWxlbWVudCgkcGFkZGluZ1Q6MTBweCwgJHBhZGRpbmdCOjEwcHgsICRwYWRkaW5nTDo1cHgsICRwYWRkaW5nUjo1cHgsICRib3JkZXJXOjFweCkge1xuXHRtYXJnaW4gICAgOiAwO1xuXHRsaXN0LXN0eWxlOiBub25lO1xuXHRwYWRkaW5nICAgOiAwO1xuXHRtYXgtd2lkdGggOiA2MDBweDtcblxuXHRsaSB7XG5cdFx0cGFkZGluZyAgICAgICAgOiAkcGFkZGluZ1QgJHBhZGRpbmdSICRwYWRkaW5nQiAkcGFkZGluZ0w7XG5cdFx0ZGlzcGxheSAgICAgICAgOiBmbGV4O1xuXHRcdG1hcmdpbiAgICAgICAgIDogMDtcblx0XHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cdFx0Ym9yZGVyLWJvdHRvbSAgOiAkYm9yZGVyVyBzb2xpZCAkYm9yZGVyLWNvbG9yO1xuXG5cdFx0PiAqOmZpcnN0LWNoaWxkIHtcblx0XHRcdG1pbi13aWR0aDogYXV0bztcblx0XHR9XG5cblx0XHQ+ICo6Zmlyc3QtY2hpbGQrKiB7XG5cdFx0XHR0ZXh0LWFsaWduOiByaWdodDtcblx0XHRcdG1pbi13aWR0aCA6IDUwcHg7XG5cdFx0fVxuXHR9XG59XG4vKipcbiAqICBJbWFnZXMgYXJlYSB0byBwcmVsb2FkLFxuICogIG9uIGFqb3V0ZSBzdXIgbGEgZGl2IGNvbnRlbmFudCBsJ2ltYWdlXG4gKi9cbkBtaXhpbiBpbWFnZS1kcGFjZS1wcmVsb2FkKCRzcGFjZTo3MCUpIHtcblx0ZGlzcGxheSA6IGJsb2NrO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHRvcCAgICAgOiAwO1xuXHRsZWZ0ICAgIDogMDtcblx0cmlnaHQgICA6IDA7XG5cdGJvdHRvbSAgOiAwO1xuXG5cdGltZyB7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHRvcCAgICAgOiAwO1xuXHRcdGxlZnQgICAgOiAwO1xuXHR9XG5cblx0Jjo6YmVmb3JlIHtcblx0XHRjb250ZW50ICAgICAgIDogXCJcIjtcblx0XHRkaXNwbGF5ICAgICAgIDogYmxvY2s7XG5cdFx0cGFkZGluZy1ib3R0b206ICRzcGFjZTtcblx0fVxufVxuLyoqXG4gKlxuICovXG5AbWl4aW4gbGluZWFyLWdyYWRpZW50KCRzdGFydC1jb2xvcjojOTI5MDkwLCAkZW5kLWNvbG9yOiNlMmUyZTIsICRvcmllbnRhdGlvbjondmVydGljYWwnKSB7XG5cdGJhY2tncm91bmQ6ICRzdGFydC1jb2xvcjtcblxuXHRAaWYgJG9yaWVudGF0aW9uPT0gJ3ZlcnRpY2FsJyB7XG5cdFx0YmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAkc3RhcnQtY29sb3IsICRlbmQtY29sb3IpO1xuXHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICRzdGFydC1jb2xvciwgJGVuZC1jb2xvcik7XG5cdH0gQGVsc2UgXG5cdGlmICRvcmllbnRhdGlvbj09J2hvcml6b250YWwnIHtcblx0XHRiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCAkc3RhcnQtY29sb3IsICRlbmQtY29sb3IpO1xuXHRcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yKTtcblx0fSBAZWxzZSB7XG5cdFx0YmFja2dyb3VuZDogLXdlYmtpdC1yYWRpYWwtZ3JhZGllbnQoY2VudGVyLCBlbGxpcHNlIGNvdmVyLCAkc3RhcnQtY29sb3IsICRlbmQtY29sb3IpO1xuXHRcdGJhY2tncm91bmQ6IHJhZGlhbC1ncmFkaWVudChlbGxpcHNlIGF0IGNlbnRlciwgJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yKTtcblx0fVxufVxuLyoqXG4gKiBBZmZldCBPbWJyZVxuICovXG5AbWl4aW4gb21icmUoJHN0YXJ0LWNvbG9yOiNiMWIwYjAsICRlbmQtY29sb3I6I2ZmZmNmYykge1xuXHRAaW5jbHVkZSBsaW5lYXItZ3JhZGllbnQoJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yLCAkb3JpZW50YXRpb246J3ZlcnRpY2FsJyk7XG59XG5AbWl4aW4gcm9yYXRpb25ibG9jaygpIHtcblx0d2lkdGggICAgICAgICAgICAgIDogNDAwcHg7XG5cdGhlaWdodCAgICAgICAgICAgICA6IDQwMHB4O1xuXHRkaXNwbGF5ICAgICAgICAgICAgOiBpbmxpbmUtYmxvY2s7XG5cdHBvc2l0aW9uICAgICAgICAgICA6IHJlbGF0aXZlO1xuXHRjb2xvciAgICAgICAgICAgICAgOiAjRkZGO1xuXHQtd2Via2l0LXBlcnNwZWN0aXZlOiA2MDBweDtcblx0cGVyc3BlY3RpdmUgICAgICAgIDogNjAwcHg7XG5cblx0LmZhY2UtYXZhbnQge1xuXHRcdHBvc2l0aW9uICAgICAgICAgICAgICAgICAgIDogYWJzb2x1dGU7XG5cdFx0dG9wICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXHRcdGxlZnQgICAgICAgICAgICAgICAgICAgICAgIDogMDtcblx0XHRiYWNrZ3JvdW5kICAgICAgICAgICAgICAgICA6ICNmMDA7XG5cdFx0Ym90dG9tICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXHRcdHJpZ2h0ICAgICAgICAgICAgICAgICAgICAgIDogMDtcblx0XHR3aWR0aCAgICAgICAgICAgICAgICAgICAgICA6IDEwMCU7XG5cdFx0dHJhbnNmb3JtLXN0eWxlICAgICAgICAgICAgOiBwcmVzZXJ2ZS0zZDtcblx0XHRiYWNrZmFjZS12aXNpYmlsaXR5ICAgICAgICA6IGhpZGRlbjtcblx0XHQtd2Via2l0LXRyYW5zZm9ybS1zdHlsZSAgICA6IHByZXNlcnZlLTNkO1xuXHRcdC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuXHRcdHRyYW5zaXRpb24gICAgICAgICAgICAgICAgIDogMC44cztcblx0fVxuXG5cdC5mYWNlLWFycmllcmUge1xuXHRcdHBvc2l0aW9uICAgICAgICAgICAgICAgICAgIDogYWJzb2x1dGU7XG5cdFx0dG9wICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXHRcdGxlZnQgICAgICAgICAgICAgICAgICAgICAgIDogMDtcblx0XHRiYWNrZ3JvdW5kICAgICAgICAgICAgICAgICA6ICMwMEY7XG5cdFx0Ym90dG9tICAgICAgICAgICAgICAgICAgICAgOiAwO1xuXHRcdHJpZ2h0ICAgICAgICAgICAgICAgICAgICAgIDogMDtcblx0XHR3aWR0aCAgICAgICAgICAgICAgICAgICAgICA6IDEwMCU7XG5cdFx0YmFja2ZhY2UtdmlzaWJpbGl0eSAgICAgICAgOiBoaWRkZW47XG5cdFx0dHJhbnNmb3JtLXN0eWxlICAgICAgICAgICAgOiBwcmVzZXJ2ZS0zZDtcblx0XHR0cmFuc2Zvcm0gICAgICAgICAgICAgICAgICA6IHJvdGF0ZXkoLTE4MGRlZyk7XG5cdFx0LXdlYmtpdC10cmFuc2Zvcm0tc3R5bGUgICAgOiBwcmVzZXJ2ZS0zZDtcblx0XHQtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcblx0XHQtd2Via2l0LXRyYW5zZm9ybSAgICAgICAgICA6IHJvdGF0ZXkoLTE4MGRlZyk7XG5cdFx0dHJhbnNpdGlvbiAgICAgICAgICAgICAgICAgOiAwLjhzO1xuXHR9XG5cblx0Jjpob3ZlciB7XG5cdFx0LmZhY2UtYXJyaWVyZSB7XG5cdFx0XHR0cmFuc2Zvcm0gICAgICAgIDogcm90YXRleSgwKTtcblx0XHRcdC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV5KDApO1xuXHRcdH1cblxuXHRcdC5mYWNlLWF2YW50IHtcblx0XHRcdC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV5KDE4MGRlZyk7XG5cdFx0XHR0cmFuc2Zvcm0gICAgICAgIDogcm90YXRleSgxODBkZWcpO1xuXHRcdH1cblx0fVxufVxuLyoqXG4gKiBQcmljZWxpc3RcbiAqL1xuQG1peGluIHByaWNlTGlzdCgkYmFja2dyb3VuZF9iZzojM2M1MjY1KSB7XG5cdHBhZGRpbmctdG9wICA6IDQwcHg7XG5cdG1hcmdpbi1sZWZ0ICA6IDE1cHg7XG5cdG1hcmdpbi1yaWdodCA6IDE1cHg7XG5cdG1hcmdpbi1ib3R0b206IDMwcHg7XG5cdG1heC13aWR0aCAgICA6IDM1MHB4O1xuXHR3aWR0aCAgICAgICAgOiAxMDAlO1xuXG5cdC5jYXJkLWhlYWRlciB7XG5cdFx0YmFja2dyb3VuZDogJGJhY2tncm91bmRfYmc7XG5cdFx0cG9zaXRpb24gIDogcmVsYXRpdmU7XG5cdFx0ei1pbmRleCAgIDogMDtcblx0XHRjb2xvciAgICAgOiAjRkZGO1xuXHRcdG1pbi1oZWlnaHQ6IDkwcHg7XG5cdFx0Zm9udC1zaXplIDogMC43ZW07XG5cdFx0QGluY2x1ZGUgbWVkaWEtbWluKFhTKSB7XG5cdFx0XHRtaW4taGVpZ2h0OiAxMTVweDtcblx0XHRcdGZvbnQtc2l6ZSA6IDFlbTtcblx0XHR9XG5cblx0XHRzdmcge1xuXHRcdFx0cG9zaXRpb24gICAgIDogYWJzb2x1dGU7XG5cdFx0XHR0b3AgICAgICAgICAgOiAwO1xuXHRcdFx0cmlnaHQgICAgICAgIDogLTE5cHg7IC8vLTI4cHg7XG5cdFx0XHRib3R0b20gICAgICAgOiAwO1xuXHRcdFx0aGVpZ2h0ICAgICAgIDogMTI2JTtcblx0XHRcdHdpZHRoICAgICAgICA6IDExMCU7IC8vMTE0JTtcblx0XHRcdHotaW5kZXggICAgICA6IC0xO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogOHB4IDAgMCAwO1xuXHRcdFx0bWF4LXdpZHRoICAgIDogNjAwcHg7XG5cblx0XHRcdD4gcGF0aCB7XG5cdFx0XHRcdGZpbGwgICAgICAgICAgIDogJGJhY2tncm91bmRfYmc7XG5cdFx0XHRcdHN0cm9rZSAgICAgICAgIDogJGJhY2tncm91bmRfYmc7XG5cdFx0XHRcdHN0cm9rZS13aWR0aCAgIDogMDtcblx0XHRcdFx0c3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcblx0XHRcdH1cblxuXHRcdFx0PiBwYXRoLm9tYnJlLWxlZnQge1xuXHRcdFx0XHRmaWxsICA6IGRhcmtlbigkYmFja2dyb3VuZF9iZywgNyk7XG5cdFx0XHRcdHN0cm9rZTogZGFya2VuKCRiYWNrZ3JvdW5kX2JnLCA3KTtcblx0XHRcdFx0ZCAgICAgOiBwYXRoKFwiTSAwLDgwIEwgMjAsNzkgTCAxMCwxMDBcIik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LnRpdGxlLXNtYWxsIHtcblx0XHRcdGZvbnQtd2VpZ2h0ICA6IDUwMDtcblx0XHRcdG1hcmdpbiAgICAgICA6IDA7XG5cdFx0XHRsaW5lLWhlaWdodCAgOiAxMDAlO1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogMTBweDtcblx0XHRcdGNvbG9yICAgICAgICA6ICNGRkY7XG5cdFx0fVxuXG5cdFx0LnRpdGxlIHtcblx0XHRcdGZvbnQtd2VpZ2h0ICAgOiAzMDA7XG5cdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0bWFyZ2luICAgICAgICA6IDA7XG5cdFx0XHRsaW5lLWhlaWdodCAgIDogMTAwJTtcblx0XHRcdG1hcmdpbi1ib3R0b20gOiA1cHg7XG5cdFx0XHRjb2xvciAgICAgICAgIDogI0ZGRjtcblx0XHR9XG5cdH1cblxuXHQuY2FyZC1ib2R5IHtcblx0XHRwb3NpdGlvbiAgOiByZWxhdGl2ZTtcblx0XHR6LWluZGV4ICAgOiAxO1xuXHRcdGJhY2tncm91bmQ6ICNGRkY7XG5cdFx0cGFkZGluZyAgIDogMmVtIDAuOHJlbSAwLjhyZW07XG5cdFx0QGluY2x1ZGUgbWVkaWEtbWluKFhTKSB7XG5cdFx0XHRwYWRkaW5nOiAyZW0gMS4yNXJlbSAxLjI1cmVtO1xuXHRcdH1cblxuXHRcdCY6OmJlZm9yZSB7XG5cdFx0XHRjb250ZW50ICAgOiBcIlwiO1xuXHRcdFx0d2lkdGggICAgIDogMTAwJTtcblx0XHRcdGhlaWdodCAgICA6IDZweDtcblx0XHRcdGJhY2tncm91bmQ6ICNlMmUyZTI7XG5cdFx0XHRAaW5jbHVkZSBvbWJyZSgpO1xuXHRcdFx0dG9wICAgICAgIDogMDtcblx0XHRcdGxlZnQgICAgICA6IDA7XG5cdFx0XHRwb3NpdGlvbiAgOiBhYnNvbHV0ZTtcblx0XHR9XG5cdH1cblxuXHQuYm9keS1oZWFkZXIge1xuXHRcdHBhZGRpbmctbGVmdCA6IDFlbTtcblx0XHRib3JkZXItYm90dG9tOiAycHggc29saWQgJGJhY2tncm91bmRfYmc7XG5cdFx0bWFyZ2luLWJvdHRvbTogMzBweDtcblx0fVxuXG5cdC5jYXJkLXRpdGxlLnByaWNlLFxuXHQuY2FyZC10aXRsZS5wcmljZS1wcm9tbyB7XG5cdFx0Zm9udC1zaXplICAgIDogMi4yZW07XG5cdFx0bGluZS1oZWlnaHQgIDogMTAwJTtcblx0XHRmb250LXdlaWdodCAgOiAzMDA7XG5cdFx0bWFyZ2luLWJvdHRvbTogMC42cmVtO1xuXHR9XG5cblx0LmNhcmQtdGl0bGUucHJpY2UuYmFycmUge1xuXHRcdHBvc2l0aW9uICAgICAgIDogYWJzb2x1dGU7XG5cdFx0dG9wICAgICAgICAgICAgOiAxMHB4O1xuXHRcdHJpZ2h0ICAgICAgICAgIDogMS4yNXJlbTtcblx0XHRmb250LXNpemUgICAgICA6IDEuMmVtO1xuXHRcdHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuXHRcdGNvbG9yICAgICAgICAgIDogI2Y1NTA0Yjtcblx0fVxuXG5cdC5jYXJkLXRpdGxlLnByaWNlLXN1ZmZpeCB7XG5cdFx0Zm9udC1zaXplICAgOiAwLjhlbTtcblx0XHRsaW5lLWhlaWdodCA6IDEwMCU7XG5cdFx0cGFkZGluZy1sZWZ0OiA0cHg7XG5cdH1cblxuXHQubGlzdCB7XG5cdFx0bWFyZ2luLWJvdHRvbTogMTVweDtcblx0XHRsaW5lLWhlaWdodCAgOiAxLjNlbTtcblx0XHRmb250LXNpemUgICAgOiAwLjllbTtcblxuXHRcdC5pY29uZSB7XG5cdFx0XHRwYWRkaW5nLXJpZ2h0OiAxMHB4O1xuXG5cdFx0XHRpIHtcblx0XHRcdFx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0ycHgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpLmFjdGl2ZSB7XG5cdFx0XHRcdGNvbG9yOiBsaWdodGVuKCRjb2xvcjogJGJhY2tncm91bmRfYmcsICRhbW91bnQ6IDEwKTtcblx0XHRcdH1cblxuXHRcdFx0aS5kaXNhYmxlIHtcblx0XHRcdFx0Y29sb3I6ICNjMTJmMmY7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0LmV4cGxpY2F0aW9uIHtcblx0XHRcdGZvbnQtc2l6ZTogMC44ZW07XG5cdFx0fVxuXHR9XG5cblx0LmJ0biB7XG5cdFx0Y29sb3IgICAgICAgOiAkYmFja2dyb3VuZF9iZztcblx0XHRib3JkZXItY29sb3I6ICRiYWNrZ3JvdW5kX2JnO1xuXHR9XG5cblx0LmJ0bjpob3ZlciB7XG5cdFx0Y29sb3IgICAgICAgICAgIDogI0ZGRjtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiBzYXR1cmF0ZSgkY29sb3I6ICRiYWNrZ3JvdW5kX2JnLCAkYW1vdW50OiAyNSUpO1xuXHRcdGJvcmRlci1jb2xvciAgICA6IHNhdHVyYXRlKCRjb2xvcjogJGJhY2tncm91bmRfYmcsICRhbW91bnQ6IDI1JSk7XG5cdH1cblxuXHQuYnRuLmZvY3VzLFxuXHQuYnRuOmZvY3VzIHtcblx0XHRib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgkYmFja2dyb3VuZF9iZywgMC41KTtcblx0fVxuXG5cdC5hY3Rpb25zIHtcblx0XHRib3JkZXItdG9wIDogMXB4IHNvbGlkICRiYWNrZ3JvdW5kX2JnO1xuXHRcdG1hcmdpbi10b3AgOiAxZW07XG5cdFx0cGFkZGluZy10b3A6IDEuNWVtO1xuXHRcdHBvc2l0aW9uICAgOiByZWxhdGl2ZTtcblxuXHRcdCY6OmJlZm9yZSB7XG5cdFx0XHRAaW5jbHVkZSBvbWJyZSgkc3RhcnQtY29sb3I6I2IxYjBiMCwgJGVuZC1jb2xvcjojZmZmY2ZjKTtcblx0XHRcdGNvbnRlbnQgOiBcIlwiO1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0dG9wICAgICA6IDA7XG5cdFx0XHRsZWZ0ICAgIDogMDtcblx0XHRcdHJpZ2h0ICAgOiAwO1xuXHRcdFx0Ym90dG9tICA6IGF1dG87XG5cdFx0XHRoZWlnaHQgIDogMnB4O1xuXHRcdH1cblx0fVxufSIsIi8vQGZvcndhcmQgXCIuL3ZhcmlhYmxlcy5zY3NzXCI7XG5AZm9yd2FyZCBcIi4vbWl4aW5zL3didV9taXhpbnMuc2Nzc1wiOyAvL1xuLy9AaW1wb3J0IFwiLi92YXJpYWJsZXNcIjtcbkBmb3J3YXJkIFwiLi9ib290c3RyYXBfaW5pdC5zY3NzXCI7XG5AZm9yd2FyZCBcIi4vZGVmYXV0L21vZGVsL2N1c3RvbV9icC5zY3NzXCI7XG5AZm9yd2FyZCBcIi4vZGVmYXV0L21peGlucy9jb21wb25lbnRzLnNjc3NcIjtcbi8qKi9cbi8vQGZvcndhcmQgXCIuL3ZhcmlhYmxlcy5zY3NzXCI7IiwiQHVzZSBcIi4uLy4uL3didS1yZXNzb3VyY2VzLnNjc3NcIiBhcyAqO1xuXG4ucGFnZS1oZWFkZXItYmcge1xuICBwYWRkaW5nICAgICAgOiAkd2J1LW1hcmdpbioyIDA7XG4gIG1pbi1oZWlnaHQgICA6ICR3YnUtcGFnZS1oZWFkZXItYmc7XG4gIG1hcmdpbi1ib3R0b206ICR3YnUtbWFyZ2luKjM7XG59IiwiQHVzZSBcIi4uLy4uL3didS1yZXNzb3VyY2VzLnNjc3NcIiBhcyAqO1xuXG5ib2R5LFxuaHRtbCB7XG4gIGZvbnQtc2l6ZTogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZTtcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcbiAgbGluZS1oZWlnaHQ6ICR3YnUtZGVmYXVsdC1saW5lLWhlaWdodDtcbiAgY29sb3I6ICR3YnUtY29sb3ItdGV4dDtcbiAgbWFyZ2luOiAwO1xufVxuXG5odG1sIHtcbiAgZm9udC1zaXplOiA2Mi41JTtcbiAgbGluZS1oZWlnaHQ6IDEuNTtcbn1cbiIsIkB1c2UgXCIuLi8uLi93YnUtcmVzc291cmNlcy5zY3NzXCIgYXMgKjtcbkB1c2UgXCJkZWZhdWx0XCI7XG4vKipcbiAgRWxtZW50IGRlIGJhc2UgcG91ciBsZSB0aXRyZS5cbiovXG4vL1xuXG4uaDEsXG4uaDIsXG4uaDMsXG4uaDQsXG4uaDUsXG4uaDYsXG5oMSxcbmgyLFxuaDMsXG5oNCxcbmg1LFxuaDYge1xuICBmb250LWZhbWlseTogJHdidS10aXRsZS1mb250LWZhbWlseTtcbiAgZm9udC13ZWlnaHQ6ICR3YnUtdGl0bGUtZm9udC13ZWlnaHQ7XG4gIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICBtYXJnaW4gICAgIDogMDtcbiAgY29sb3IgICAgICA6ICR3YnUtdGl0bGUtY29sb3I7XG59IiwiLy8gdmFyaWFibGU7XG5AdXNlIFwiLi4vLi4vd2J1LXJlc3NvdXJjZXMuc2Nzc1wiIGFzICo7XG5AdXNlIFwiLi90aXRsZVwiO1xuXG5oMSB7XG4gIGZvbnQtc2l6ZSAgOiAkd2J1LWgxLWZvbnQtc2l6ZTtcbiAgbWFyZ2luICAgICA6IDAgMCAkd2J1LWgxLW1hcmdpbjtcbiAgbGluZS1oZWlnaHQ6ICR3YnUtaDEtbGluZS1oZWlnaHQ7XG4gIEBpbmNsdWRlIG1lZGlhLW1pbignREQnKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LWgxLWZvbnQtc2l6ZSAqMS4yNDtcbiAgfVxufVxuLy9AZGVidWcgXCIqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogXFxuIDogI3skd2J1LWgxLWZvbnQtc2l6ZX1cIjsiLCIvLyB2YXJpYWJsZSBwb3VyIGxlcyBQQlxuJFhYX2ZpbiA6NDQwcHg7XG5cbiRYU19kZWJ1dCA6NDQxcHg7XG4kWFNfZmluOiA1NzVweDtcblxuJFNNX2RlYnV0OiA1NzZweDtcbiRTTV9maW46IDc2OHB4O1xuXG4kTURfZGVidXQ6IDc2OXB4O1xuJE1EX2ZpbjogOTkxcHg7XG5cbiRERF9kZWJ1dDogOTkycHg7XG4kRERfZmluOiAxMDI0cHg7XG5cbiRNU19kZWJ1dDogMTAyNXB4O1xuJE1TX2ZpbjogMTIwMHB4O1xuXG4kTV9kZWJ1dDogMTIwMXB4O1xuJE1fZmluOiAxNDUwcHg7XG5cbiRMTV9kZWJ1dDogMTQ1MXB4O1xuJExNX2ZpbjogMTYwMHB4O1xuXG4kTF9kZWJ1dDogMTYwMXB4O1xuJExfZmluOiAxOTIwcHg7XG5cbiRYTF9kZWJ1dDogMTkyMXB4O1xuLy8kWExfZmluOiAyNTAwcHg7XG5cbi8vIHZhcmlhaWJsZXMgQnJlYWtQb2ludHNcbiR2YXI6IGZhbHNlICFkZWZhdWx0OyAvLyBDYW4gYmUgb3ZlcnJpZGRlbiBlbHNld2hlcmVcblxuQGlmICR2YXIgPT0gdHJ1ZSB7XG4gIC8vZGl2IHB7Zm9udC1zaXplOjQwcHg7fVxufSBAZWxzZSBpZiAkdmFyID09IGZhbHNlIHsgIFxuICAvL2RpdiBwe2ZvbnQtc2l6ZTo4MHB4O31cbn1AZWxzZSB7ICBcbiAgLy9kaXYgcHtmb250LXNpemU6ODBweDt9XG59XG5cbkBtaXhpbiBtZWRpYS1taW4oJF9rZXk6IGZhbHNlKSB7XG4gIEBpZiAkX2tleSA9PSAnWFMnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JFhTX2RlYnV0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnU00nIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JFNNX2RlYnV0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnTUQnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JE1EX2RlYnV0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnREQnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JEREX2RlYnV0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnTVMnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JE1TX2RlYnV0KSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnTScge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDokTV9kZWJ1dCkge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJF9rZXkgPT0gJ0xNJyB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiRMTV9kZWJ1dCkge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJF9rZXkgPT0gJ0wnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6JExfZGVidXQpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmICRfa2V5ID09ICdYTCcge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDokWExfZGVidXQpIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBtZWRpYS1tYXgoJF9rZXkpIHtcbiAgQGlmICRfa2V5ID09ICdYWCcge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDokWFhfZmluKXtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IFxuICBAZWxzZSBpZiAkX2tleSA9PSAnU00nIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6JFNNX2Zpbikge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gXG4gIEBlbHNlIGlmICRfa2V5ID09ICdYUycge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDokWFNfZmluKSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuICBAZWxzZSBpZiAkX2tleSA9PSAnTUQnIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6JE1EX2Zpbikge1xuICAgICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgQGVsc2UgaWYgJF9rZXkgPT0gJ0REJyB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiRERF9maW4pIHtcbiAgICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIEBlbHNlIGlmICRfa2V5ID09ICdNUycge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDokTVNfZmluKSB7XG4gICAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWVkaWEtYmV0d2VlbigkX21pbiwgJF9tYXgpIHtcbiAgXG59IFxuXG4iLCJAdXNlIFwiLi4vLi4vd2J1LXJlc3NvdXJjZXMuc2Nzc1wiIGFzICo7XG5AdXNlIFwiLi90aXRsZVwiO1xuXG5wIHtcbiAgZm9udC1zaXplOiAkd2J1LXAtZm9udC1zaXplO1xuICBtYXJnaW4gICA6IDAgMCAkd2J1LW1hcmdpbi8xLjU7XG59IiwiQHVzZSBcIi4uLy4uL3didS1yZXNzb3VyY2VzLnNjc3NcIiBhcyAqO1xuQHVzZSBcIi4uLy4uL2F0b21lL3R5cG9ncmFwaHkvaDFcIjtcbkB1c2UgXCIuLi8uLi9hdG9tZS90eXBvZ3JhcGh5L3BcIjtcblxuLmhlYWRlci1ibG9nIHtcbiAgbWFyZ2luLWJvdHRvbTogJHdidS1tYXJnaW4qMi41O1xuICBmb250LXNpemUgICAgOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplKjEuODk7XG4gIGxpbmUtaGVpZ2h0ICA6IDEuMTtcbiAgdGV4dC1hbGlnbiAgIDogY2VudGVyO1xuICBAaW5jbHVkZSBtZWRpYS1taW4oJ0REJykge1xuICAgIHRleHQtYWxpZ24gOiBsZWZ0O1xuICAgIGZvbnQtc2l6ZSAgOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplKjEuMzI7XG4gICAgbGluZS1oZWlnaHQ6IDEuNjU7XG4gIH1cblxuICBwIHtcbiAgICBmb250LXNpemUgICAgOiBpbmhlcml0O1xuICAgIG1hcmdpbi1ib3R0b206IDA7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9*/