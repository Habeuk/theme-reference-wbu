@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
.page-header-bg {
  padding: 4rem 0;
  min-height: 200px;
  margin-bottom: 6rem;
}

body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 600;
  line-height: inherit;
  margin: 0;
  color: inherit;
}

h1 {
  font-size: 3.4rem;
  margin: 0 0 1.5037593985rem;
  line-height: 4.2rem;
}
@media only screen and (min-width: 992px) {
  h1 {
    font-size: 4.216rem;
  }
}

p {
  font-size: inherit;
  margin: 0 0 1.3333333333rem;
}

.header-blog {
  margin-bottom: 5rem;
  font-size: 2.646rem;
  line-height: 1.1;
  text-align: center;
}
@media only screen and (min-width: 992px) {
  .header-blog {
    text-align: left;
    font-size: 1.848rem;
    line-height: 1.65;
  }
}
.header-blog p {
  font-size: inherit;
  margin-bottom: 0;
}

.single-blog {
  max-width: 770px;
  margin-left: auto;
  margin-right: auto;
  font-size: 1.806rem;
  line-height: 1.677;
}
@media only screen and (min-width: 992px) {
  .single-blog--body img, .single-blog--images img {
    margin-left: -60px;
    margin-right: -60px;
    max-width: calc(100% + 120px);
  }
}
.single-blog--title {
  text-align: center;
}
.single-blog--images {
  margin-bottom: 4rem;
}
.single-blog--introduction {
  margin-bottom: 4rem;
  font-weight: 400;
}
.single-blog--tags {
  display: flex;
  justify-content: center;
  font-size: 1.186440678rem;
  font-weight: 500;
  color: #7f7f7f;
  margin-bottom: 2rem;
}
.single-blog--tags .item {
  margin-right: 1rem;
  display: inline-flex;
}
.single-blog--tags .item a {
  padding: 0.5rem 1.3333333333rem;
  border: 1px solid #dee2e6;
  color: inherit;
}
.single-blog--icones_info {
  display: flex;
  justify-content: center;
  margin-bottom: 2rem;
  font-size: 1.186440678rem;
}
.single-blog--icones_info .item {
  margin-right: 1rem;
}
.single-blog--body {
  margin-bottom: 5rem;
}
.single-blog--body p + p img {
  margin-top: 2rem;
}
.single-blog--body h2 {
  padding-top: 2rem;
  position: relative;
}
.single-blog--body h2::before {
  content: "";
  display: block;
  border-top: 1px solid #dee2e6;
  margin-bottom: 4rem;
  margin-top: 6.4rem;
}
.single-blog .single-blog--owl .owl-nav .owl-prev {
  left: 0;
  right: auto;
  top: auto;
  bottom: 8rem;
}
.single-blog .single-blog--owl .owl-nav .owl-next {
  left: 5rem;
  right: auto;
  top: auto;
  bottom: 8rem;
}
.single-blog .single-blog--owl .owl-nav {
  position: relative;
  max-width: 500px;
  width: calc(100% - 60px);
  margin-left: auto;
  margin-right: auto;
}
@media only screen and (min-width: 992px) {
  .single-blog .single-blog--owl .owl-nav {
    max-width: 100%;
    width: calc(100% - 100px);
  }
}

h3 {
  font-size: 1.8rem;
  line-height: 2.4rem;
}
@media only screen and (min-width: 992px) {
  h3 {
    font-size: 2.268rem;
  }
}

.teaser-img-desc {
  margin-bottom: 3rem;
  position: relative;
  z-index: 1;
}
@media only screen and (min-width: 992px) {
  .teaser-img-desc.flex-column {
    margin-bottom: 0;
  }
}
.teaser-img-desc__image {
  width: 260px;
  position: relative;
}
.teaser-img-desc__image .categorie {
  position: absolute;
  background: #FFF;
  border-radius: 0.2rem;
  top: 10px;
  right: auto;
  left: 10px;
  padding: 0.8rem 1.4rem;
  font-weight: 600;
  font-size: 1.1965811966rem;
  z-index: 1;
}
.teaser-img-desc__image .img a::before {
  content: "";
  background-color: #333;
  opacity: 0.3;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 0;
}
.teaser-img-desc__desc {
  width: calc(100% - 260px);
  padding-left: 1.3333333333rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}
@media only screen and (min-width: 992px) {
  .teaser-img-desc__desc {
    padding-right: 8rem;
  }
}
.teaser-img-desc__desc .description {
  margin-bottom: 1rem;
}
.teaser-img-desc__desc .title {
  font-weight: 500;
  margin-bottom: 1.3333333333rem;
  line-height: 2.4rem;
}
.teaser-img-desc__desc .title a {
  color: inherit;
}
.teaser-img-desc__desc .time_read {
  position: relative;
  font-size: 1.1965811966rem;
  padding-left: 1.7rem;
}
.teaser-img-desc__desc .time_read::before {
  content: "";
  position: absolute;
  width: 1.2rem;
  height: 1.2rem;
  top: auto;
  left: 0;
  bottom: 0;
  background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='11' viewBox='0 0 12 11' fill='none'%3E%3Cpath d='M5.93919 10.3125C8.61094 10.3125 10.7768 8.15787 10.7768 5.5C10.7768 2.84213 8.61094 0.6875 5.93919 0.6875C3.26744 0.6875 1.10156 2.84213 1.10156 5.5C1.10156 8.15787 3.26744 10.3125 5.93919 10.3125Z' stroke='%23A9A9A9' stroke-linecap='round' stroke-linejoin='round'%3E%3C/path%3E%3Cpath d='M5.9375 2.75V5.5L7.31968 6.875' stroke='%23A9A9A9' stroke-linecap='round' stroke-linejoin='round'%3E%3C/path%3E%3C/svg%3E");
  background-repeat: no-repeat;
}
.teaser-img-desc.flex-column .teaser-img-desc__image {
  width: 100%;
}
.teaser-img-desc.flex-column .teaser-img-desc__desc {
  width: 100%;
  padding: 2rem 1.3333333333rem 0;
}

.header-blog.space-margin {
  margin-bottom: 0;
}
.header-blog p {
  margin-bottom: 2rem;
}
.header-blog p:last-child {
  margin-bottom: 0;
}

.serviceBlock-module {
  max-width: 770px;
}

.service-cle {
  max-width: 870px;
}
.service-cle .images {
  margin-bottom: 2rem;
}
@media only screen and (min-width: 992px) {
  .service-cle .images {
    margin-bottom: 0;
  }
}
@media only screen and (min-width: 992px) {
  .service-cle .images img {
    position: absolute;
    right: 3rem;
  }
}
@media only screen and (min-width: 992px) {
  .service-cle .single-blog--body {
    margin-bottom: 0;
  }
}

.teaser-img-desc .categorie,
.teaser-img-desc .time_read {
  display: none;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/